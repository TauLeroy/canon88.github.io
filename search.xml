<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Wazuh - 如何对异构数据进行关联告警</title>
    <url>/2020/02/25/Wazuh-%E5%A6%82%E4%BD%95%E5%AF%B9%E5%BC%82%E6%9E%84%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94%E5%91%8A%E8%AD%A6/</url>
    <content><![CDATA[<p><strong>写在前面</strong></p>
<p>​       这并不是什么<strong>高精尖</strong>的架构与技术。这只是我个人在工作中结合目前手头的资源进行了一些<strong>整合</strong> 。当然实现这些需求的方法有很多, 有钱的可以考虑Splunk, 没钱的有研发的团队的可以上Flink、Esper 。 </p>
<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>​    由于攻防对抗的升级, 通过单一的数据源很难直接断言攻击是否成功。因此, 我们需要结合多个数据源进行安全事件的关联, 从中提炼出可靠性较高的安全告警进行人工排查。例如: 针对WebShell上传类的, 可以通过<strong>网络流量 + 终端</strong>进行关联; 针对Web攻击类, 可以通过<strong>WAF + NIDS</strong>的事件关联, 得到Bypass WAF 的安全告警。</p>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>​    虽然Wazuh本身具备安全事件的关联能力, 但在传统的部署架构中, 通常是由Wazuh Agent将安全事件发送到Wazuh Manager,通过Manager进行安全事件的关联告警。由于缺少了对数据进行ETL, 使得Wazuh Manager很难对异构数据进行关联。因此, 我们需要通过Logstash实现对数据的标准化, 并将标准化后的数据通过Syslog的形式发送到Wazuh Manager, 从而进行异构数据的关联。</p>
<h5 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h5><ol>
<li>本次改造采用了<strong>Syslog</strong>的形式将数据发送到Wazuh Manager端进行数据关联。由于<strong>Syslog</strong> 默认采用了<strong>UDP</strong>协议进行数据传输, 当数据发送过大时将会导致<strong>数据截断</strong>的报错。针对此问题, 需改用<strong>TCP</strong>的形式进行数据发送规避此问题。</li>
<li>Wazuh Manager 部分告警缺少”<strong>必要</strong>“关联字段的现象。如: 本次场景中<code>syscheck</code>告警事件, 默认不会携带<code>srcip</code>的字段, 对于此问题可以通过在Manager上编写一个预处理脚本来解决。</li>
</ol>
<h4 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h4><ol>
<li><h5 id="改造之前"><a href="#改造之前" class="headerlink" title="改造之前:"></a>改造之前:</h5><p>Suricata (Wazuh agent) —(Agent: UDP 1514)—&gt; Wazuh Manager</p>
</li>
<li><h5 id="改造之后"><a href="#改造之后" class="headerlink" title="改造之后:"></a>改造之后:</h5><p>所有的标准化都由Logstash来进行, Filebeat只需要做’<strong>无脑</strong>‘转发即可。</p>
</li>
</ol>
<p><strong>workflow:</strong></p>
<p><img src="/2020/02/25/Wazuh-如何对异构数据进行关联告警/image-20200303215020561.png" alt="image-20200303215020561"></p>
<hr>
<h5 id="Filebeat配置"><a href="#Filebeat配置" class="headerlink" title="Filebeat配置"></a>Filebeat配置</h5><ul>
<li><h6 id="filebeat-yaml"><a href="#filebeat-yaml" class="headerlink" title="filebeat.yaml"></a>filebeat.yaml</h6></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#=========================== Filebeat inputs =============================</span></span><br><span class="line"><span class="string">filebeat.inputs:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  paths:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"/var/log/suricata/alert-*.json"</span></span><br><span class="line"><span class="attr">  fields_under_root:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  fields:</span> <span class="string">&#123;</span> <span class="attr">application:</span> <span class="string">suricata</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">json.keys_under_root:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">json.overwrite_keys:</span> <span class="literal">true</span></span><br><span class="line">  <span class="string">json.message_key:</span> <span class="string">log</span></span><br><span class="line"><span class="attr">  tail_files:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  scan_frequency:</span> <span class="number">1</span><span class="string">s</span></span><br><span class="line"><span class="attr">  harvester_buffer_size:</span> <span class="number">104857600</span></span><br><span class="line"><span class="attr">  backoff:</span> <span class="number">1</span><span class="string">s</span></span><br><span class="line"><span class="attr">  max_backoff:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">  close_timeout:</span> <span class="number">30</span><span class="string">m</span></span><br><span class="line"><span class="attr">  close_inactive:</span> <span class="number">10</span><span class="string">m</span></span><br><span class="line"><span class="attr">  clean_inactive:</span> <span class="number">72</span><span class="string">h</span></span><br><span class="line"><span class="attr">  ignore_older:</span> <span class="number">70</span><span class="string">h</span></span><br><span class="line"><span class="attr">  registry_file:</span> <span class="string">/etc/filebeat/registry/wazuh/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================ Processors ==================================</span></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="attr">- drop_fields:</span></span><br><span class="line"><span class="attr">    fields:</span> <span class="string">["ecs.version",</span> <span class="string">"agent.ephemeral_id"</span><span class="string">,</span> <span class="string">"agent.version"</span><span class="string">,</span> <span class="string">"agent.type"</span><span class="string">,</span> <span class="string">"agent.id"</span><span class="string">,</span> <span class="string">"agent.ephemeral_id"</span><span class="string">,</span> <span class="string">"input.type"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#================================ Outputs =====================================</span></span><br><span class="line"><span class="string">output.logstash:</span></span><br><span class="line"><span class="attr">  hosts:</span> <span class="string">["logstash:5010"]</span></span><br><span class="line"><span class="attr">  loadbalance:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  worker:</span> <span class="number">4</span></span><br><span class="line"><span class="attr">  compression_level:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  bulk_max_size:</span> <span class="number">4096</span></span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Logstash配置"><a href="#Logstash配置" class="headerlink" title="Logstash配置"></a>Logstash配置</h5><ul>
<li><h6 id="00-input-conf"><a href="#00-input-conf" class="headerlink" title="00_input.conf"></a>00_input.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  beats &#123;</span><br><span class="line">    port =&gt; 5010</span><br><span class="line">    codec =&gt; <span class="string">"json_lines"</span></span><br><span class="line">    tags =&gt; [<span class="string">"beats"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="50-suricata-conf"><a href="#50-suricata-conf" class="headerlink" title="50_suricata.conf"></a>50_suricata.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [application] == <span class="string">"suricata"</span> &#123;</span><br><span class="line">    date &#123;</span><br><span class="line">      match =&gt; [ <span class="string">"timestamp"</span>, <span class="string">"ISO8601"</span> ]</span><br><span class="line">      target =&gt; <span class="string">"timestamp"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="mapping-json"><a href="#mapping-json" class="headerlink" title="mapping.json"></a>mapping.json</h6></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"common_mapping"</span>: &#123;</span><br><span class="line">        <span class="attr">"src_ip"</span>: <span class="string">"srcip"</span>,</span><br><span class="line">        <span class="attr">"dest_ip"</span>: <span class="string">"dstip"</span>,</span><br><span class="line">        <span class="attr">"src_port"</span>: <span class="string">"srcport"</span>,</span><br><span class="line">        <span class="attr">"dest_port"</span>: <span class="string">"dstport"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="70-normalized-suricata-conf"><a href="#70-normalized-suricata-conf" class="headerlink" title="70_normalized-suricata.conf"></a>70_normalized-suricata.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">  <span class="built_in">clone</span> &#123;</span><br><span class="line">    clones =&gt; [ <span class="string">"siem_events"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="built_in">type</span>] == <span class="string">"siem_events"</span> &#123;</span><br><span class="line">    mutate &#123;</span><br><span class="line">      remove_field =&gt; [ <span class="string">"application"</span>, <span class="string">"type"</span>, <span class="string">"agent"</span>, <span class="string">"@version"</span>, <span class="string">"@timestamp"</span>]</span><br><span class="line">      add_field =&gt; &#123;</span><br><span class="line">        <span class="string">"provider"</span> =&gt; <span class="string">"Suricata"</span></span><br><span class="line">        <span class="string">"product"</span> =&gt; <span class="string">"Intrusion Detection System"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ruby &#123;</span><br><span class="line">      init =&gt; <span class="string">"</span></span><br><span class="line"><span class="string">        require 'json'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mapping_json = File.read('/etc/logstash/mappings/wazuh/mapping.json')</span></span><br><span class="line"><span class="string">        mapping = JSON.parse(mapping_json)</span></span><br><span class="line"><span class="string">        @common_mapping = mapping['common_mapping']</span></span><br><span class="line"><span class="string">      "</span></span><br><span class="line"></span><br><span class="line">      code =&gt; <span class="string">"</span></span><br><span class="line"><span class="string">        keys = event.to_hash.keys</span></span><br><span class="line"><span class="string">        keys.each do |key|</span></span><br><span class="line"><span class="string">            if @common_mapping.include? key then</span></span><br><span class="line"><span class="string">                value = event.get(key)</span></span><br><span class="line"><span class="string">                event.remove(key)</span></span><br><span class="line"><span class="string">                new_key = @common_mapping[key]</span></span><br><span class="line"><span class="string">                event.set(new_key, value)</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        sensor = event.get('[host][name]')</span></span><br><span class="line"><span class="string">        event.set('sensor', sensor)</span></span><br><span class="line"><span class="string">      "</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="99-output-elasticsearch-conf"><a href="#99-output-elasticsearch-conf" class="headerlink" title="99_output-elasticsearch.conf"></a>99_output-elasticsearch.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [event_type] == <span class="string">"alert"</span> &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      cacert =&gt; <span class="string">"/etc/logstash/certs/ca/ca.crt"</span></span><br><span class="line">      user =&gt; <span class="string">"elastic"</span></span><br><span class="line">      password =&gt; <span class="string">"Hello World!"</span></span><br><span class="line">      hosts =&gt; [<span class="string">"https://elasticsearch:9200"</span>]</span><br><span class="line">      index =&gt; <span class="string">"suricata-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">      template =&gt; <span class="string">"/etc/logstash/index-template.d/suricata-template.json"</span></span><br><span class="line">      template_name =&gt; <span class="string">"suricata"</span></span><br><span class="line">      template_overwrite =&gt; <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="99-output-wazuh-conf"><a href="#99-output-wazuh-conf" class="headerlink" title="99_output-wazuh.conf"></a>99_output-wazuh.conf</h6></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output &#123;</span><br><span class="line">  <span class="keyword">if</span> [provider] == <span class="string">"Suricata"</span> &#123;</span><br><span class="line">    syslog &#123;</span><br><span class="line">        host =&gt; <span class="string">"wazuh"</span></span><br><span class="line">        protocol =&gt; <span class="string">"tcp"</span></span><br><span class="line">        port =&gt; 514</span><br><span class="line">        codec =&gt; <span class="string">"json"</span></span><br><span class="line">        sourcehost =&gt; <span class="string">"logstash"</span></span><br><span class="line">        appname =&gt; <span class="string">"NORMALIZED"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#stdout &#123;</span></span><br><span class="line">        <span class="comment">#codec =&gt; rubydebug</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="Wazuh配置"><a href="#Wazuh配置" class="headerlink" title="Wazuh配置"></a>Wazuh配置</h5><ul>
<li><h6 id="custom-syscheck-py"><a href="#custom-syscheck-py" class="headerlink" title="custom-syscheck.py"></a>custom-syscheck.py</h6><p>Wazuh Manager 新增预处理脚本对指定的安全事件进行预处理。如: syscheck事件增加<code>srcip</code>字段。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># ossec.conf configuration:</span></span><br><span class="line"><span class="comment">#  &lt;integration&gt;</span></span><br><span class="line"><span class="comment">#      &lt;name&gt;custom-syscheck&lt;/name&gt;</span></span><br><span class="line"><span class="comment">#      &lt;rule_id&gt;554&lt;/rule_id&gt;</span></span><br><span class="line"><span class="comment">#      &lt;group&gt;syscheck&lt;/group&gt;</span></span><br><span class="line"><span class="comment">#      &lt;alert_format&gt;json&lt;/alert_format&gt;</span></span><br><span class="line"><span class="comment">#  &lt;/integration&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Global vars</span></span><br><span class="line">debug_enabled = <span class="literal">False</span></span><br><span class="line">pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line">json_alert = &#123;&#125;</span><br><span class="line">now = time.strftime(<span class="string">"%a %b %d %H:%M:%S %Z %Y"</span>)</span><br><span class="line">wazuh_server = <span class="string">"192.168.199.97"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set paths</span></span><br><span class="line">log_file = <span class="string">'&#123;0&#125;/logs/integrations.log'</span>.format(pwd)</span><br><span class="line">syscheck_file = <span class="string">'&#123;0&#125;/logs/syscheck.json'</span>.format(pwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iso8601</span><span class="params">(hours=<span class="number">8</span>)</span>:</span></span><br><span class="line">    td = timedelta(hours=hours)</span><br><span class="line">    tz = timezone(td)</span><br><span class="line">    <span class="keyword">return</span> datetime.now(tz=tz).isoformat()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args)</span>:</span></span><br><span class="line">    debug(<span class="string">"# Starting"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Read args</span></span><br><span class="line">    alert_file_location = args[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    debug(<span class="string">"# File location"</span>)</span><br><span class="line">    debug(alert_file_location)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load alert. Parse JSON object.</span></span><br><span class="line">    <span class="keyword">with</span> open(alert_file_location) <span class="keyword">as</span> alert_file:</span><br><span class="line">        json_alert = json.load(alert_file)</span><br><span class="line">    debug(<span class="string">"# Processing alert"</span>)</span><br><span class="line">    debug(json_alert)</span><br><span class="line"></span><br><span class="line">    alert = normalized_data(json_alert)</span><br><span class="line">    <span class="keyword">with</span> open(syscheck_file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        msg = json.dumps(alert)</span><br><span class="line">        f.write(msg + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> debug_enabled:</span><br><span class="line">        msg = <span class="string">"&#123;0&#125;: &#123;1&#125;\n"</span>.format(now, msg)</span><br><span class="line">        <span class="keyword">with</span> open(log_file, <span class="string">"a"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(msg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalized_data</span><span class="params">(alert)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> alert[<span class="string">'agent'</span>][<span class="string">'id'</span>] == <span class="string">'000'</span>:</span><br><span class="line">        alert[<span class="string">'srcip'</span>] = wazuh_server</span><br><span class="line">    <span class="keyword">elif</span> alert[<span class="string">'agent'</span>].get(<span class="string">'ip'</span>):</span><br><span class="line">        alert[<span class="string">'srcip'</span>] = alert[<span class="string">'agent'</span>][<span class="string">'ip'</span>]</span><br><span class="line">        alert[<span class="string">'dstip'</span>] = alert[<span class="string">'agent'</span>][<span class="string">'ip'</span>]</span><br><span class="line">    alert[<span class="string">'integration'</span>] = <span class="string">'custom-syscheck'</span></span><br><span class="line">    alert[<span class="string">'create_timestamp'</span>] = iso8601()</span><br><span class="line">    debug(alert)</span><br><span class="line">    <span class="keyword">return</span>(alert)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Read arguments</span></span><br><span class="line">        bad_arguments = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> len(sys.argv) &gt;= <span class="number">4</span>:</span><br><span class="line">            msg = <span class="string">'&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125; &#123;4&#125;'</span>.format(now, sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], sys.argv[<span class="number">3</span>], sys.argv[<span class="number">4</span>] <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">4</span> <span class="keyword">else</span> <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">'&#123;0&#125; Wrong arguments'</span>.format(now)</span><br><span class="line">            bad_arguments = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Logging the call</span></span><br><span class="line">        <span class="keyword">with</span> open(log_file, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(msg + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bad_arguments:</span><br><span class="line">            debug(<span class="string">"# Exiting: Bad arguments."</span>)</span><br><span class="line">            sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Main function</span></span><br><span class="line">        main(sys.argv)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        debug(str(e))</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="ossec-conf"><a href="#ossec-conf" class="headerlink" title="ossec.conf"></a>ossec.conf</h6><ul>
<li>配置syslog选用<strong>TCP</strong>协议;</li>
<li>加载预处理脚本;</li>
<li>加载脚本输出日志;</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ossec_config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">remote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>syslog<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>514<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>tcp<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span> <span class="comment">&lt;!-- udp(default)/tcp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">allowed-ips</span>&gt;</span>192.168.199.0/24<span class="tag">&lt;/<span class="name">allowed-ips</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">remote</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Custom external Integration --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">integration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>custom-syscheck<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule_id</span>&gt;</span>554<span class="tag">&lt;/<span class="name">rule_id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span>syscheck<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alert_format</span>&gt;</span>json<span class="tag">&lt;/<span class="name">alert_format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">integration</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- Custom syscheck.json --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log_format</span>&gt;</span>json<span class="tag">&lt;/<span class="name">log_format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/var/ossec/logs/syscheck.json<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">localfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ossec_config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="local-decoder-normalized-xml"><a href="#local-decoder-normalized-xml" class="headerlink" title="local_decoder_normalized.xml"></a>local_decoder_normalized.xml</h6></li>
</ul>
<p><strong>Sample</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">2020 Mar 03 02:53:39 logstash NORMALIZED[-]: &#123;"timestamp":"2020-02-21T19:47:04.382300+0800","flow_id":1133835979634527,"in_iface":"wlp3s0","event_type":"alert","src_ip":"192.168.199.97","src_port":60022,"dest_ip":"192.168.199.162","dest_port":59143,"proto":"TCP","alert":&#123;"action":"allowed","gid":1,"signature_id":123456,"rev":1,"signature":"LOCAL RULES XXX","severity":3&#125;&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">decoder</span> <span class="attr">name</span>=<span class="string">"nta_json"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prematch</span>&gt;</span>NORMALIZED[-]: <span class="tag">&lt;/<span class="name">prematch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin_decoder</span> <span class="attr">offset</span>=<span class="string">"after_prematch"</span>&gt;</span>JSON_Decoder<span class="tag">&lt;/<span class="name">plugin_decoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">decoder</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="0901-local-raw-xml"><a href="#0901-local-raw-xml" class="headerlink" title="0901-local_raw.xml"></a>0901-local_raw.xml</h6><ul>
<li>默认引用的解码器为<code>json</code>, 这里需要修改为刚才新增的<code>nta_json</code>;</li>
<li>通过<code>overwrite=yes</code>覆盖原始规则;</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"suricata,"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- /var/ossec/ruleset/rules/0475-suricata_rules.xml --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Defind Suricata Rules --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ID: 86600 - 86699 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">"86600"</span> <span class="attr">level</span>=<span class="string">"0"</span> <span class="attr">overwrite</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">decoded_as</span>&gt;</span>nta_json<span class="tag">&lt;/<span class="name">decoded_as</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"timestamp"</span>&gt;</span>\.+<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"event_type"</span>&gt;</span>\.+<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Suricata messages.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="0905-local-syscheck-xml"><a href="#0905-local-syscheck-xml" class="headerlink" title="0905-local_syscheck.xml"></a>0905-local_syscheck.xml</h6><p>为预处理脚本生成的日志进行解析</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"syscheck,"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">"187100"</span> <span class="attr">level</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">decoded_as</span>&gt;</span>json<span class="tag">&lt;/<span class="name">decoded_as</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"integration"</span>&gt;</span>custom-syscheck<span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>syscheck integration messages.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="9999-local-composite-xml"><a href="#9999-local-composite-xml" class="headerlink" title="9999-local_composite.xml"></a>9999-local_composite.xml</h6></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"local,composite,"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Local Composite Rules Range ID: 200000 - 205000 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">"200000"</span> <span class="attr">level</span>=<span class="string">"15"</span> <span class="attr">frequency</span>=<span class="string">"2"</span> <span class="attr">timeframe</span>=<span class="string">"600"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_matched_sid</span>&gt;</span>101000<span class="tag">&lt;/<span class="name">if_matched_sid</span>&gt;</span> <span class="comment">&lt;!-- 文件上传类规则 or 检测WebShell上传类规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_sid</span>&gt;</span>187100<span class="tag">&lt;/<span class="name">if_sid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">same_source_ip</span> /&gt;</span>	<span class="comment">&lt;!-- 通过IP进行关联 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Phase 3: 检测到服务器:$(srcip), 被上传WebShell.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">"200001"</span> <span class="attr">level</span>=<span class="string">"12"</span> <span class="attr">frequency</span>=<span class="string">"2"</span> <span class="attr">timeframe</span>=<span class="string">"600"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_matched_sid</span>&gt;</span>88801<span class="tag">&lt;/<span class="name">if_matched_sid</span>&gt;</span> <span class="comment">&lt;!-- WAF安全事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_group</span>&gt;</span>ids<span class="tag">&lt;/<span class="name">if_group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">same_source_ip</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Phase 3: Alarm - Same ip Bypass WAF of within 600 seconds. $(srcip) -&gt; $(http.hostname) -&gt; $(alert.signature) -&gt; $(alert.signature_id).<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>对于<strong>WebShell</strong>关联检测,目前采用的是同源IP以及时序的关联, 最为靠谱的应该是通过Hash的比对。这里要吐槽一下Suricata默认的fileinfo, 没办法自定义输出, 只要开启可被还原的协议都会输出fileinfo的事件。正因如此, 数据量一大Wazuh的引擎压力会很大。我尝试通过<strong>Lua</strong>来自定义一个文件审计类的事件, 貌似也同样没办法区分协议更别说针对http过滤条件进行自定义的过滤输出了。</li>
</ol>
<ol start="2">
<li>由于关联规则本身是通过底层多个安全事件进行维度的关联提升告警的<strong>可靠性</strong>。因此, 底层安全事件不够准确同样会让上层的关联规则带来大量误报。对于底层安全事件的优化也是需要持续进行的。</li>
</ol>
<ol start="3">
<li><strong>Wazuh v3.11.4</strong> 采用syslog接收大日志时, 会触发<code>memory violation</code>导致<code>ossec-remoted</code>进程重启, 该问题已向社区反馈下个版本中会解决。</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><p><strong><a href="https://wazuh.com/blog/how-to-forward-android-syslog-to-wazuh/" target="_blank" rel="noopener">How to forward Android syslog to Wazuh</a></strong></p>
</li>
<li><p><strong><a href="https://wazuh.com/blog/how-to-configure-rsyslog-client-to-send-events-to-wazuh/" target="_blank" rel="noopener">How to configure Rsyslog client to send events to Wazuh</a></strong></p>
</li>
<li><p><strong><a href="https://wazuh.com/blog/how-to-integrate-external-software-using-integrator/" target="_blank" rel="noopener">How to integrate external software using Integrator</a></strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>HIDS、NIDS</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
        <tag>Suricata</tag>
        <tag>Wazuh</tag>
        <tag>Filbeat</tag>
      </tags>
  </entry>
  <entry>
    <title>Wazuh - 利用CDB list过滤私网IP地址</title>
    <url>/2020/01/31/Wazuh-%E5%88%A9%E7%94%A8CDB-list%E8%BF%87%E6%BB%A4%E7%A7%81%E7%BD%91IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>​        目前平台接入了<strong>Suricata</strong>的告警规则, 由于镜像源的关系部分规则产生了<strong>‘误’</strong>告警, 因此需要针对这部分规则进行IP地址的过滤。</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol>
<li>修改Suricata的规则, 如果你的<strong>‘误’</strong>告警量很大且为了性能考虑, 推荐直接修改Suricata的规则。</li>
<li>由于我这边的Suricata告警都是利用Wazuh进行<strong>‘消费’</strong>的。因此, 我这边直接采用了<strong><a href="https://documentation.wazuh.com/3.10/user-manual/ruleset/cdb-list.html" target="_blank" rel="noopener">Wazuh CDB list</a></strong>这个功能进行指定IP地址的过滤。</li>
</ol>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><h5 id="1-创建-CDB-list"><a href="#1-创建-CDB-list" class="headerlink" title="1. 创建 CDB list"></a>1. 创建 CDB list</h5><blockquote>
<p>Each key must be unique and is terminated with a colon <code>:</code>.</p>
<p>For IP addresses the dot notation is used for subnet matches:</p>
</blockquote>
<table>
<thead>
<tr>
<th>key</th>
<th>CIDR</th>
<th>Possible matches</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.:</td>
<td>192.168.0.0/16</td>
<td>192.168.0.0 - 192.168.255.255</td>
</tr>
<tr>
<td>172.16.19.:</td>
<td>172.16.19.0/24</td>
<td>172.16.19.0 - 172.16.19.255</td>
</tr>
<tr>
<td>10.1.1.1:</td>
<td>10.1.1.1/32</td>
<td>10.1.1.1</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /var/ossec/etc/lists/private_ip</span><br><span class="line"></span><br><span class="line">10.168.:PrivateNet</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Since Wazuh v3.11.3, CDB lists are built and loaded automatically when the analysis engine is started. Therefore, when adding or modifying CDB lists, it is no longer needed to run <code>ossec-makelists</code>, just restart the manager.</p>
</blockquote>
<p>从Wazuh v3.11.3开始，将在启动分析引擎时自动构建和加载CDB列表。因此，添加或修改CDB列表时，不再需要运行ossec-makelists，只需重新启动管理器即可。</p>
<blockquote>
<p><strong>3.11.3 之前版本需要执行</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /var/ossec/bin/ossec-makelists</span><br></pre></td></tr></table></figure>

<h5 id="2-在-ossec-conf-中添加-list"><a href="#2-在-ossec-conf-中添加-list" class="headerlink" title="2. 在 ossec.conf 中添加 list"></a>2. 在 ossec.conf 中添加 list</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /var/ossec/etc/ossec.conf</span><br><span class="line"></span><br><span class="line">&lt;ossec_config&gt;</span><br><span class="line">  &lt;ruleset&gt;</span><br><span class="line">    &lt;!-- User-defined CDB --&gt;</span><br><span class="line">    &lt;list&gt;etc/lists/private_ip&lt;/list&gt;</span><br><span class="line">  &lt;/ruleset&gt;</span><br><span class="line">&lt;/ossec_config&gt;</span><br></pre></td></tr></table></figure>

<h5 id="3-重启进程"><a href="#3-重启进程" class="headerlink" title="3. 重启进程"></a>3. 重启进程</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart wazuh-manager</span><br></pre></td></tr></table></figure>

<h5 id="4-配置规则"><a href="#4-配置规则" class="headerlink" title="4. 配置规则"></a>4. 配置规则</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;var name=<span class="string">"SAME_IP_TIME"</span>&gt;120&lt;/var&gt;</span><br><span class="line">&lt;var name=<span class="string">"SAME_IP_IGORE"</span>&gt;300&lt;/var&gt;</span><br><span class="line"></span><br><span class="line">&lt;group name=<span class="string">"local,suricata,ids,"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;rule id=<span class="string">"102018"</span> level=<span class="string">"8"</span> frequency=<span class="string">"5"</span> timeframe=<span class="string">"<span class="variable">$SAME_IP_TIME</span>"</span> ignore=<span class="string">"<span class="variable">$SAME_IP_IGORE</span>"</span>&gt;</span><br><span class="line">      &lt;if_matched_sid&gt;86601&lt;/if_matched_sid&gt;</span><br><span class="line">      &lt;field name=<span class="string">"alert.signature_id"</span>&gt;2013057&lt;/field&gt;</span><br><span class="line">      &lt;list field=<span class="string">"src_ip"</span> lookup=<span class="string">"not_address_match_key"</span>&gt;etc/lists/private_ip&lt;/list&gt;</span><br><span class="line">      &lt;description&gt;Wazuh Rules - Same ip of attack occurred 5 <span class="built_in">times</span> within <span class="variable">$SAME_IP_TIME</span> seconds. $(src_ip) -&gt; $(alert.signature) -&gt; $(alert.signature_id).&lt;/description&gt;</span><br><span class="line">      &lt;options&gt;no_full_log&lt;/options&gt;</span><br><span class="line">    &lt;/rule&gt;</span><br><span class="line"></span><br><span class="line">&lt;/group&gt;</span><br></pre></td></tr></table></figure>

<h5 id="5-测试规则"><a href="#5-测试规则" class="headerlink" title="5. 测试规则"></a>5. 测试规则</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /var/ossec/bin/ossec-logtest</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://documentation.wazuh.com/3.11/user-manual/ruleset/cdb-list.html?highlight=match_key" target="_blank" rel="noopener">Using CDB lists</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>HIDS</category>
      </categories>
      <tags>
        <tag>Wazuh</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash Event API</title>
    <url>/2019/12/30/Logstash-Event-API/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​        由于项目需要, 用到了<code>Ruby</code>对Logstash进行一些定制化的配置。翻遍了整个Logstash的官方文档, 对于Ruby API的介绍就写了两个方法。<code>get</code> 与 <code>set</code> 也是醉了😂, 幸好谷歌一下…</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>删除事件：cancel</li>
<li>取消删除事件：uncancel</li>
<li>是否删除：cancelled?</li>
<li>是否包含字段：include?</li>
<li>删除字段：remove</li>
<li>事件转字符串：to_s</li>
<li>事件转hash字典（不含metadata字段）：to_hash</li>
<li>事件转hash字典（含metadata字段）：to_hash_with_metadata</li>
<li>事件转json字符串：to_json</li>
<li>增加tag：tag</li>
<li>取事件时间戳：timestamp</li>
</ul>
<p><strong>更多查询官方接口源码:</strong> <a href="https://github.com/elastic/logstash/blob/master/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java" target="_blank" rel="noopener"><strong>JrubyEventExtLibrary.java</strong></a></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://blog.csdn.net/mvpboss1004/article/details/78070300" target="_blank" rel="noopener">Lostash event API详解</a></strong></li>
<li><a href="https://github.com/elastic/logstash/blob/master/logstash-core/src/main/java/org/logstash/ext/JrubyEventExtLibrary.java" target="_blank" rel="noopener"><strong>JrubyEventExtLibrary.java</strong></a></li>
<li><strong><a href="https://www.rubydoc.info/gems/logstash-event/1.1.5/LogStash/Event#cancel-instance_method" target="_blank" rel="noopener">Class: LogStash::Event</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Logstash Multiple Pipelines</title>
    <url>/2019/12/30/Logstash-Multiple-Pipelines/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>当Logstash要处理的多个input类型时, 最常见的两种解决方案(<strong>不推荐</strong>):</p>
<ol>
<li><p>通过条件判断解决问题</p>
</li>
<li><p>通过多实例解决问题</p>
</li>
</ol>
<p><strong>负面影响:</strong></p>
<ol>
<li><p>条件判断</p>
<ol>
<li>条件地狱。已知的在一个管道中实现多个独立流的方法是使用条件判断。主要方式是在输入部分通过标签标记事件，然后在过滤器中和输出阶段创建条件分支，对贴有不同标签的事件，应用不同的插件集。这种方式虽然可以解决问题，但在实际的使用中却非常的痛苦！下面是一个简单的 demo 片段：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    beats &#123; </span><br><span class="line">        port =&gt; 3444  </span><br><span class="line">        tag =&gt; apache </span><br><span class="line">    &#125;</span><br><span class="line">    tcp &#123; </span><br><span class="line">        port =&gt; 4222</span><br><span class="line">        tag =&gt; firewall</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"apache"</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        dissect &#123; ... &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="string">"firewall"</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        grok &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"apache"</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        elasticsearch &#123; ... &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="string">"firewall"</span> <span class="keyword">in</span> [tags] &#123;</span><br><span class="line">        tcp &#123; ... &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol>
<li>缺乏拥塞管理。Logstash在所有事件和完成所有输出之前不会移动到下一批事件。这意味着，对于上面的管道，如果 TCP 套接字目标不可达，Logstash将不会处理其他批次的事件，这也就意味着 Elasticsearch 将不会接收事件，并且会对 TCP 输入和 Beats 输入施加反压力。</li>
<li>不同的数据流需要以不同的方式处理。如果 TCP - &gt; Grok - &gt; TCP 数据流处理大量的小数据，而 Beats -&gt; Dissect -&gt; ES 数据流中的单个数据体积大但是数量少。那么前一个数据流希望有多个 worker 并行并其每一批次处理更多事件，第二个数据流则期望使用少量的 worker 和每批次处理少量的事件。使用单个管道，无法为单个数据流指定独立的管道配置。</li>
</ol>
<ol start="2">
<li>多实例<ol>
<li>需要管理多个实例(通过 init 系统管理多个后台服务)</li>
<li>每个 Logstash 的实例也意味着一个独立的 JVM</li>
<li>需要监视每个 Logstash 实例</li>
</ol>
</li>
</ol>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>​        通过配置多管道(Multiple Pipelines), 解决以上的所有问题。</p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p><code>/usr/share/logstash/config/pipelines.yml</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file is where you define your pipelines. You can define multiple.</span></span><br><span class="line"><span class="comment"># For more information on multiple pipelines, see the documentation:</span></span><br><span class="line"><span class="comment">#   https://www.elastic.co/guide/en/logstash/current/multiple-pipelines.html</span></span><br><span class="line"></span><br><span class="line">- pipeline.id: dsiem</span><br><span class="line">  path.config: <span class="string">"/etc/logstash/conf.d_siem/*.conf"</span></span><br><span class="line">  pipeline.workers: 16</span><br><span class="line">  queue.type: persisted</span><br><span class="line">  queue.max_bytes: 300gb</span><br><span class="line"></span><br><span class="line">- pipeline.id: cloudflare</span><br><span class="line">  path.config: <span class="string">"/etc/logstash/conf.d_cf/*.conf"</span></span><br><span class="line">  pipeline.workers: 8</span><br><span class="line">  queue.type: persisted</span><br><span class="line">  queue.max_bytes: 100gb</span><br><span class="line"></span><br><span class="line">- pipeline.id: ti</span><br><span class="line">  path.config: <span class="string">"/etc/logstash/conf.d_ti/*.conf"</span></span><br><span class="line">  pipeline.workers: 8</span><br><span class="line">  queue.type: persisted</span><br><span class="line">  queue.max_bytes: 50gb</span><br></pre></td></tr></table></figure>

<p><code>/etc/supervisord.d/logstash.ini</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[program:logstash]</span><br><span class="line"><span class="built_in">command</span>=/usr/share/logstash/bin/logstash --path.data /lingtian/data/logstash/</span><br><span class="line"><span class="comment">#user=logstash</span></span><br><span class="line">numprocs=1</span><br><span class="line">autostart=<span class="literal">true</span></span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">startsecs=1</span><br><span class="line">startretries=3</span><br><span class="line">exitcodes=0,2</span><br><span class="line">stopsignal=INT</span><br><span class="line">redirect_stderr=<span class="literal">true</span></span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=5</span><br><span class="line">stdout_capture_maxbytes=1MB</span><br><span class="line">stdout_logfile=/lingtian/logs/logstash/logstash.log</span><br></pre></td></tr></table></figure>

<h5 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h5><p>可通过使用参数, <code>--config.reload.automatic</code> or <code>-r</code> 在配置文件发生更改后自动检测并重新加载配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/logstash -f apache.config --config.reload.automatic</span><br></pre></td></tr></table></figure>

<p>默认3秒检查配置文件, 可以通过使用参数, <code>--config.reload.interval</code>修改秒数。</p>
<p>如果Logstash已经在没有启用自动重载的情况下运行，则可以通过向运行Logstash的进程发送SIGHUP（信号挂起）来强制Logstash重载配置文件并重新启动管道。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">kill</span> -SIGHUP <span class="variable">$logstash_pid</span></span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><p><strong><a href="https://github.com/elastic/logstash/blob/master/config/pipelines.yml" target="_blank" rel="noopener">Pipelines 参数</a></strong></p>
</li>
<li><p><strong><a href="https://www.elastic.co/guide/en/logstash/6.7/multiple-pipelines.html" target="_blank" rel="noopener">Multiple Pipelines</a></strong></p>
</li>
<li><p><strong><a href="https://www.elastic.co/cn/blog/logstash-multiple-pipelines" target="_blank" rel="noopener">Introducing Multiple Pipelines in Logstash - 原文</a></strong></p>
</li>
<li><p><strong><a href="https://www.cnblogs.com/sparkdev/p/11073980.html" target="_blank" rel="noopener">Introducing Multiple Pipelines in Logstash - 中文</a></strong></p>
</li>
<li><p><strong><a href="https://www.elastic.co/guide/en/logstash/current/reloading-config.html" target="_blank" rel="noopener">Reloading the Config Fileedit </a></strong></p>
</li>
<li><p><a href="http://www.51niux.com/?id=205" target="_blank" rel="noopener"><strong>Logstash详细记录（五</strong>）</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy 多个item对应一个pipeline</title>
    <url>/2019/12/30/Scrapy-%E5%A4%9A%E4%B8%AAitem%E5%AF%B9%E5%BA%94%E4%B8%80%E4%B8%AApipeline/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​        在利用<strong>Scrapy</strong>编写爬虫时,经常会遇到同一个爬虫中包含多个item classes, 并且需要在同一个<code>pipelines.py</code>中根据不同的item classes进行逻辑的处理。</p>
<p>​        <strong>需求:</strong> 数据需要同时发送到ElasticSearch以及Redis, 唯一的区别就是item classes,不同。发送到Redis的数据是标准化之后的数据, 发送到ElasticSearch是原始的数据。</p>
<p>​        <strong>解决方法:</strong> 这里可以通过<code>isinstance</code>来进行区分。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define your item pipelines here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></span><br><span class="line"><span class="comment"># See: https://doc.scrapy.org/en/latest/topics/item-pipeline.html</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tb.items <span class="keyword">import</span> RedisItem</span><br><span class="line"><span class="keyword">from</span> tb.items <span class="keyword">import</span> ElasticSearchItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, RedisItem):</span><br><span class="line">            <span class="comment"># to do something</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(item, ElasticSearchItem):</span><br><span class="line">            <span class="comment"># to do something</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><strong><a href="https://stackoverflow.com/questions/32743469/scrapy-python-multiple-item-classes-in-one-pipeline" target="_blank" rel="noopener">Scrapy, Python: Multiple Item Classes in one pipeline?</a></strong></li>
<li><strong><a href="https://blog.csdn.net/sinat_32651363/article/details/79092431" target="_blank" rel="noopener">Scrapy同一个爬虫里包含不同item，pipelines文件编写</a></strong></li>
</ul>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis Key 过期事件订阅</title>
    <url>/2019/12/24/Redis-Key-%E8%BF%87%E6%9C%9F%E4%BA%8B%E4%BB%B6%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>​        在自建企业内部威胁情报的过程中, 需要通过<strong>Redis</strong>统一管理过期时间的<strong>Key</strong>。因此需要对过期的<strong>Key</strong>进行实时监听, 并进行回调处理。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>​        在 <strong>Redis</strong> 的 <strong>2.8.0</strong> 版本之后，其推出了一个新的特性——键空间消息（Redis Keyspace Notifications），它配合 2.0.0 版本之后的 SUBSCRIBE 就能完成这个定时任务的操作了。</p>
<p><strong>Redis 的键空间通知支持 订阅指定 Key 的所有事件 与 订阅指定事件 两种方式。</strong></p>
<blockquote>
<p>Keyspace notifications are implemented sending two distinct type of events for every operation affecting the Redis data space. For instance a DEL operation targeting the key named mykey in database 0 will trigger the delivering of two messages, exactly equivalent to the following two PUBLISH commands:</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PUBLISH __keyspace@0__:mykey del</span><br><span class="line">PUBLISH __keyevent@0__:del mykey</span><br></pre></td></tr></table></figure>

<p><strong>通过 Redis 的键空间通知（keyspace notification）可以做到：将IoC数据写入Redis，设置过期时间10分钟，利用 Redis 键过期回调提醒，如果未被消费，则进行处理。</strong></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="1-修改-redis-conf-开启redis-key过期提醒"><a href="#1-修改-redis-conf-开启redis-key过期提醒" class="headerlink" title="1. 修改 redis.conf 开启redis key过期提醒"></a>1. 修改 redis.conf 开启redis key过期提醒</h4><blockquote>
<p>By default keyspace events notifications are disabled because while not very sensible the feature uses some CPU power. Notifications are enabled using the notify-keyspace-events of redis.conf or via the CONFIG SET.</p>
</blockquote>
<p>由于键空间通知比较耗CPU, 所以 Redis默认是关闭键空间事件通知的， 需要手动开启 <code>notify-keyspace-events</code>后才启作用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">K：keyspace事件，事件以__keyspace@&lt;db&gt;__为前缀进行发布；        </span><br><span class="line">E：keyevent事件，事件以__keyevent@&lt;db&gt;__为前缀进行发布；        </span><br><span class="line">g：一般性的，非特定类型的命令，比如del，expire，rename等；       </span><br><span class="line">$：String 特定命令；        </span><br><span class="line">l：List 特定命令；        </span><br><span class="line">s：Set 特定命令；        </span><br><span class="line">h：Hash 特定命令；        </span><br><span class="line">z：Sorted 特定命令；        </span><br><span class="line">x：过期事件，当某个键过期并删除时会产生该事件；        </span><br><span class="line">e：驱逐事件，当某个键因maxmemore策略而被删除时，产生该事件；        </span><br><span class="line">A：g<span class="variable">$lshzxe</span>的别名，因此”AKE”意味着所有事件。</span><br></pre></td></tr></table></figure>

<p><strong><code>notify-keyspace-events Ex</code> 表示开启键过期事件提醒</strong></p>
<p><strong>redis.conf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RDB Config</span></span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum no</span><br><span class="line">dir ./</span><br><span class="line"><span class="comment"># AOF Config</span></span><br><span class="line">appendonly yes</span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line">appendfsync everysec</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="comment"># set Password</span></span><br><span class="line">requirepass %&#123;mypassword&#125;</span><br><span class="line"><span class="comment"># set notify-keyspace-events</span></span><br><span class="line">notify-keyspace-events Ex</span><br></pre></td></tr></table></figure>

<h4 id="2-RedisHelper"><a href="#2-RedisHelper" class="headerlink" title="2. RedisHelper"></a>2. RedisHelper</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># Author: Canon</span></span><br><span class="line"><span class="comment"># Date: 2019-12-27</span></span><br><span class="line"><span class="comment"># Version: 0.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisHelper</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 连接Redis</span></span><br><span class="line">        self.__conn = redis.Redis(host=<span class="string">'127.0.0.1'</span>, port=<span class="number">6379</span>, password=<span class="string">'mypassword'</span>, db=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 定义keyevent, 此处0为indexdb</span></span><br><span class="line">        self.keyevent = <span class="string">'__keyevent@0__:expired'</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 发布方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">publish</span><span class="params">(self, key, msg)</span>:</span></span><br><span class="line">        ttl = <span class="number">10</span></span><br><span class="line">        self.__conn.setex(key, msg, ttl)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 订阅方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribe</span><span class="params">(self)</span>:</span></span><br><span class="line">        sub = self.__conn.pubsub()</span><br><span class="line">        sub.subscribe(self.keyevent)</span><br><span class="line">        <span class="keyword">for</span> msg <span class="keyword">in</span> sub.listen():</span><br><span class="line">            <span class="keyword">if</span> msg[<span class="string">'type'</span>] == <span class="string">'message'</span>:</span><br><span class="line">                ex_key = msg[<span class="string">'data'</span>].decode()</span><br><span class="line">                print(ex_key)</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><strong><a href="https://crazyfzw.github.io/2019/03/26/redis-keyspace-notifications/" target="_blank" rel="noopener">订阅 Redis 的 key 过期事件实现动态定时任务</a></strong></p>
</li>
<li><p><strong><a href="https://segmentfault.com/a/1190000016898228" target="_blank" rel="noopener">python开发-实现redis中的发布订阅功能</a></strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapyd + Scrapyd-Client</title>
    <url>/2019/12/19/Scrapyd%20+%20Scrapyd-Client/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>​        由于网站时常遭受黑客攻击, 现准备将手头一些攻击者的IP地址收集起来用做企业内部的威胁情报。既然要着手做威胁情报, 那么就避免不了通过一些网站进行数据的丰富化。要想简单省事儿, 当然是使用购买api账号的方式,不过有的api也很坑, 除非购买的是企业版, 否则个人版的api会受到请求速率的限制。所以这边只能依靠爬虫(<strong>Scrapy</strong>)来收集数据。但是采用了分布式爬虫, 就避免不了需要进行集中管理, 以及统一下等操作。下面就说下利用<strong>Scrapy</strong>官方提供的爬虫管理工具(<strong>Scrapyd</strong>)来满足以上的需求。</p>
<h1 id="Scrapyd"><a href="#Scrapyd" class="headerlink" title="Scrapyd"></a>Scrapyd</h1><p>​        <strong>Scrapyd</strong>是由<strong>Scrapy</strong> 官方提供的爬虫管理工具，使用它我们可以非常方便地上传、控制爬虫并且查看运行日志。</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install scrapyd</span><br></pre></td></tr></table></figure>

<p><strong>启动</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scrapyd</span><br><span class="line">2019-12-19T10:56:06+0800 [-] Loading /Users/canon/anaconda3/lib/python3.7/site-packages/scrapyd/txapp.py...</span><br><span class="line">2019-12-19T10:56:06+0800 [-] Scrapyd web console available at http://127.0.0.1:6800/</span><br><span class="line">2019-12-19T10:56:06+0800 [-] Loaded.</span><br><span class="line">2019-12-19T10:56:06+0800 [twisted.scripts._twistd_unix.UnixAppLogger<span class="comment">#info] twistd 18.9.0 (/Users/canon/anaconda3/bin/python 3.7.1) starting up.</span></span><br><span class="line">2019-12-19T10:56:06+0800 [twisted.scripts._twistd_unix.UnixAppLogger<span class="comment">#info] reactor class: twisted.internet.selectreactor.SelectReactor.</span></span><br><span class="line">2019-12-19T10:56:06+0800 [-] Site starting on 6800</span><br><span class="line">2019-12-19T10:56:06+0800 [twisted.web.server.Site<span class="comment">#info] Starting factory &lt;twisted.web.server.Site object at 0x109efcf98&gt;</span></span><br><span class="line">2019-12-19T10:56:06+0800 [Launcher] Scrapyd 1.2.1 started: max_proc=48, runner=<span class="string">'scrapyd.runner'</span></span><br></pre></td></tr></table></figure>

<p>​        <strong>Scrapyd</strong>是一个服务端，我们需要通过一个客户端(<strong>Scrapyd-Client</strong>)将爬虫项目发送到<strong>Scrapyd</strong>服务中去。这里先修改一下<strong>Scrapyd</strong>服务地址，默认<strong>Scrapyd</strong>启动是通过命令: <code>Scrapyd</code>就可以直接启动，默认绑定的ip地址是<em>127.0.0.1</em>端口是:<em>6800</em>，这里为了其他主机可以访问，需将ip地址设置为<em>0.0.0.0</em>。</p>
<p>​         根据上图启动的信息, 可以看到默认配置文件是在<code>/Users/canon/anaconda3/lib/python3.7/site-packages/scrapyd/</code>中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim default_scrapyd.conf</span><br><span class="line"></span><br><span class="line">[scrapyd]</span><br><span class="line">eggs_dir    = eggs</span><br><span class="line">logs_dir    = logs</span><br><span class="line">items_dir   =</span><br><span class="line">jobs_to_keep = 5</span><br><span class="line">dbs_dir     = dbs</span><br><span class="line">max_proc    = 0</span><br><span class="line">max_proc_per_cpu = 4</span><br><span class="line">finished_to_keep = 100</span><br><span class="line">poll_interval = 5.0</span><br><span class="line">bind_address = 0.0.0.0</span><br><span class="line">http_port   = 6800</span><br><span class="line">debug       = off</span><br><span class="line">runner      = scrapyd.runner</span><br><span class="line">application = scrapyd.app.application</span><br><span class="line">launcher    = scrapyd.launcher.Launcher</span><br><span class="line">webroot     = scrapyd.website.Root</span><br><span class="line"></span><br><span class="line">[services]</span><br><span class="line">schedule.json     = scrapyd.webservice.Schedule</span><br><span class="line">cancel.json       = scrapyd.webservice.Cancel</span><br><span class="line">addversion.json   = scrapyd.webservice.AddVersion</span><br><span class="line">listprojects.json = scrapyd.webservice.ListProjects</span><br><span class="line">listversions.json = scrapyd.webservice.ListVersions</span><br><span class="line">listspiders.json  = scrapyd.webservice.ListSpiders</span><br><span class="line">delproject.json   = scrapyd.webservice.DeleteProject</span><br><span class="line">delversion.json   = scrapyd.webservice.DeleteVersion</span><br><span class="line">listjobs.json     = scrapyd.webservice.ListJobs</span><br><span class="line">daemonstatus.json = scrapyd.webservice.DaemonStatus</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Scrapyd-Client"><a href="#Scrapyd-Client" class="headerlink" title="Scrapyd-Client"></a>Scrapyd-Client</h1><p>​        <strong>Scrapyd-Client</strong>可以用来部署<strong>Scrapy</strong>项目，它会帮我们把项目打包成<strong>egg</strong>文件，我们不用再动手调用<code>add version.json</code>接口去部署到<strong>Scrapyd</strong>，操作简单。</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install scrapyd-client</span><br></pre></td></tr></table></figure>

<p><strong>配置</strong></p>
<p>​        要部署<strong>Scrapy</strong>项目，我们首先需要修改项目的配置文件。首先切换至项目根目录, 会看到有一个<code>scrapy.cfg</code>文件，它的内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically created by: scrapy startproject</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information about the [deploy] section see:</span></span><br><span class="line"><span class="comment"># https://scrapyd.readthedocs.io/en/latest/deploy.html</span></span><br><span class="line"></span><br><span class="line">[settings]</span><br><span class="line">default = spider_ti.settings</span><br><span class="line"></span><br><span class="line">[deploy]</span><br><span class="line"><span class="comment">#url = http://localhost:6800/</span></span><br><span class="line">project = spider_ti</span><br></pre></td></tr></table></figure>

<p>这里需要配置一下<code>deploy</code>部分。例如, 我们将项目部署到<em>10.10.10.1</em>的<strong>Scrapyd</strong>上，则修改内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[deploy]</span><br><span class="line">url = http://10.10.10.1:6800/</span><br><span class="line">project = spider_ti</span><br></pre></td></tr></table></figure>

<p>这样我们再在<code>scrapy.cf</code>g文件所在路径执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scrapyd-deploy</span><br><span class="line"></span><br><span class="line">Packing version 1576725163</span><br><span class="line">Deploying to project <span class="string">"spider_ti"</span> <span class="keyword">in</span> http://localhost:6800/addversion.json</span><br><span class="line">Server response (200):</span><br><span class="line">&#123;<span class="string">"node_name"</span>: <span class="string">"CanondeMacBook-Pro.local"</span>, <span class="string">"status"</span>: <span class="string">"ok"</span>, <span class="string">"project"</span>: <span class="string">"spider_ti"</span>, <span class="string">"version"</span>: <span class="string">"1576725163"</span>, <span class="string">"spiders"</span>: 3&#125;</span><br></pre></td></tr></table></figure>

<p>项目版本默认为当前时间戳。我们也可以指定项目版本，通过<code>version</code>参数传递即可。例如:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ scrapyd-deploy --version 201912191114</span><br></pre></td></tr></table></figure>

<p>注: 在Python3的Scrapyd 1.2.0版本中，<strong>版本号不能指定为带字母的字符串，它们必须为纯数字</strong>，否则会出现报错。</p>
<p>如果有多台主机，我们可以配置各台主机的别名，修改配置文件为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[deploy:vm1]</span><br><span class="line">url = http://10.10.10.1:6800/</span><br><span class="line">project = spider_ti</span><br><span class="line"></span><br><span class="line">[deploy:vm2]</span><br><span class="line">url = http://10.10.10.2:6800/</span><br><span class="line">project = spider_ti</span><br></pre></td></tr></table></figure>

<p>在此统一配置多台主机，一台主机对应一组配置，在<code>deploy</code>后面加上主机的别名即可。如果想将项目部署到IP为<em>10.10.10.2</em>的<strong>vm2</strong>主机，我们只需要执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scrapyd-deploy vm2</span><br></pre></td></tr></table></figure>

<p>如此一来，我们只需要在<code>scrapy.cfg</code>文件中配置好各台主机的<strong>Scrapyd</strong>地址，然后调用<code>scrapyd-deploy</code>命令加主机名称即可实现部署。</p>
<p>如果<strong>Scrapyd</strong>设置了访问限制，我们可以在配置文件中加入用户名和密码的配置，同时修改端口成Nginx代理端口。例如: 在第1章我们使用的是6801，那么这里就需要改成6801，修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[deploy:vm1]</span><br><span class="line">url = http://10.10.10.1:6801/</span><br><span class="line">project = spider_ti</span><br><span class="line">username = admin</span><br><span class="line">password = admin</span><br><span class="line"></span><br><span class="line">[deploy:vm2]</span><br><span class="line">url = http://10.10.10.2:6801/</span><br><span class="line">project = spider_ti</span><br><span class="line">username = canon</span><br><span class="line">password = canon</span><br></pre></td></tr></table></figure>

<p>通过加入username和password字段，我们就可以在部署时自动进行Auth验证，然后成功实现部署。</p>
<p><strong>运行</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/schedule.json -d project=spider_ti -d spider=ti</span><br></pre></td></tr></table></figure>

<p><strong>列出任务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/listjobs.json?project=spider_ti | python -m json.tool</span><br></pre></td></tr></table></figure>

<p><strong>列出项目</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/listprojects.json</span><br></pre></td></tr></table></figure>

<p><strong>停止</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/cancel.json -d project=spider_ti -d job=838dec26222311ea8eb6a5eb893a35a5</span><br></pre></td></tr></table></figure>

<p><strong>删除</strong></p>
<ul>
<li><em>版本</em></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/delversion.json -d project=spider_ti -d version=1576735972</span><br></pre></td></tr></table></figure>

<ul>
<li><em>项目</em></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://127.0.0.1:6800/delproject.json -d project=spider_ti</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://juejin.im/post/5b0f8f6f6fb9a00a2364a020" target="_blank" rel="noopener"><strong>分布式爬虫的部署之Scrapyd-Client的使用</strong></a></li>
<li><a href="https://link.jianshu.com/?t=http://scrapyd.readthedocs.org/en/latest/api.html" target="_blank" rel="noopener"><strong>Scrapyd</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Suricata Custom Rules</title>
    <url>/2019/10/31/Suricata%20-%20Rules/</url>
    <content><![CDATA[<h1 id="Solr-RCE-CVE-2019-0193"><a href="#Solr-RCE-CVE-2019-0193" class="headerlink" title="Solr RCE CVE-2019-0193"></a>Solr RCE CVE-2019-0193</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Solr POST RCE CVE-2019-0193</span></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">"LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 POST"</span>; flow:to_server,established; flowbits:<span class="built_in">set</span>,CVE-2019-0193.post.request; content:<span class="string">"POST"</span>; http_method; fast_pattern; content:<span class="string">"/solr"</span>; http_uri; content:<span class="string">"/config"</span>; http_uri; content:<span class="string">"params.resource.loader.enabled"</span>; http_client_body; classtype:shellcode-detect; sid:3020016; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br><span class="line"></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">"LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 POST Successful"</span>; flow:from_server,established; flowbits:isset,CVE-2019-0193.post.request; content:<span class="string">"200"</span>; http_stat_code; classtype:shellcode-detect; sid:3020017; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Solr GET RCE CVE-2019-0193</span></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">"LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 GET"</span>; flow:to_server,established; flowbits:<span class="built_in">set</span>,CVE-2019-0193.get.request; content:<span class="string">"GET"</span>; http_method; content:<span class="string">"/solr"</span>; http_uri; fast_pattern; content:<span class="string">"/select?"</span>; http_uri; content:<span class="string">"wt=velocity"</span>; http_uri; content:<span class="string">"java.lang.Runtime"</span>; http_uri; content:<span class="string">"getRuntime().exec"</span>; http_uri; classtype:shellcode-detect; sid:3020018; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br><span class="line"></span><br><span class="line">alert http <span class="variable">$EXTERNAL_NET</span> any -&gt; <span class="variable">$HOME_NET</span> any (msg:<span class="string">"LOCAL RULES EXPLOIT Solr RCE CVE-2019-0193 GET Successful"</span>; flow:from_server,established; flowbits:isset,CVE-2019-0193.get.request; content:<span class="string">"200"</span>; http_stat_code; classtype:shellcode-detect; sid:3020019; rev:1; metadata:attack_target web_server, signature_severity Critical, direction outside_to_inside, created_at 2019_10_31, updated_at 2019_10_31, author Canon, tag RCE, tag CVE-2019-0193, tag http, tag exploit, tag Solr;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Suricata + Lua实现本地情报对接</title>
    <url>/2019/10/24/Suricata+Lua%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%83%85%E6%8A%A5%E5%AF%B9%E6%8E%A5/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​        由于近期网站遭受恶意攻击, 通过对于登录接口的审计与分析, 现已确定了一批可疑账号。既然之前写过一个登录接口的审计脚本, 那么完全可以通过扩展这个脚本来实现对于可疑账号的比对。主要思路: 通过将可疑账号存进Redis中, 再利用Lua脚本调用Redis接口进行账号的比对。</p>
<p>先说一下<strong>Suricata</strong>默认是存在黑名单机制的, 如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IP Reputation</span></span><br><span class="line"><span class="comment">#reputation-categories-file: /etc/suricata/iprep/categories.txt</span></span><br><span class="line"><span class="comment">#default-reputation-path: /etc/suricata/iprep</span></span><br><span class="line"><span class="comment">#reputation-files:</span></span><br><span class="line"><span class="comment"># - reputation.list</span></span><br></pre></td></tr></table></figure>

<p>在<strong>Suricata 5.0</strong> 版本中更是增加了新的功能<strong><a href="https://suricata.readthedocs.io/en/suricata-5.0.0/rules/datasets.html" target="_blank" rel="noopener">Datasets</a></strong>。大概看了一下, 可以通过在规则中使用<code>dataset</code>和<code>datarep</code>关键字将大量数据与<code>sticky buffer</code>进行匹配。确实是个很赞的功能!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">alert http any any -&gt; any any (http.user_agent; dataset:<span class="built_in">set</span>, ua-seen, <span class="built_in">type</span> string, save ua-seen.lst; sid:1;)</span><br><span class="line"></span><br><span class="line">alert dns any any -&gt; any any (dns.query; to_sha256; dataset:<span class="built_in">set</span>, dns-sha256-seen, <span class="built_in">type</span> sha256, save dns-sha256-seen.lst; sid:2;)</span><br><span class="line"></span><br><span class="line">alert http any any -&gt; any any (http.uri; to_md5; dataset:isset, http-uri-md5-seen, <span class="built_in">type</span> md5, load http-uri-md5-seen.lst; sid:3;)</span><br></pre></td></tr></table></figure>

<p><strong>但是</strong>… 这并不适用我现在的场景, 因为在我的场景中, 用户的登录请求存在于POST请求中, 默认的Suricata方法并不能准确定位到我们需要的账号。这个时候我们就只能依赖于<strong>Lua</strong>脚本来扩展。当然这些需求<strong>Zeek</strong>也可以满足, 只是…<strong>Zeek</strong>的脚本真是难写…不忍吐槽~</p>
<h1 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h1><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>​    <strong>OS</strong>: <em>Ubuntu 18.04</em></p>
<p>​    <strong>Suricata</strong>: <em>Suricata 5.0.0 RELEASE</em></p>
<h2 id="LuaRocks"><a href="#LuaRocks" class="headerlink" title="LuaRocks"></a>LuaRocks</h2><ol>
<li>由于Ubuntu默认没有安装<strong><a href="https://luarocks.org/" target="_blank" rel="noopener">LuaRocks</a></strong> (<em>LuaRocks is the package manager for Lua modules</em>), 这里需要我们手动安装。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过apt直接安装, 简单省事儿。</span></span><br><span class="line">$ apt-get install luarocks</span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li>通过<code>luarocks</code>安装我们所需要的<code>lua</code>模块, 这里我们需要用到<code>redis-lua</code>、<code>luasocket</code>这两个模块。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install Modules</span></span><br><span class="line">$ luarocks install luasocket</span><br><span class="line">$ luarocks install redis-lua</span><br><span class="line"></span><br><span class="line">$ ll /usr/<span class="built_in">local</span>/share/lua/5.1/</span><br><span class="line">total 72</span><br><span class="line">drwxr-xr-x 3 root root  4096 Oct 25 03:35 ./</span><br><span class="line">drwxr-xr-x 3 root root  4096 Sep 17 14:14 ../</span><br><span class="line">-rw-r--r-- 1 root root  8331 Oct 25 03:34 ltn12.lua</span><br><span class="line">-rw-r--r-- 1 root root  2487 Oct 25 03:34 mime.lua</span><br><span class="line">-rw-r--r-- 1 root root 35599 Oct 25 03:35 redis.lua</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 25 03:34 socket/</span><br><span class="line">-rw-r--r-- 1 root root  4451 Oct 25 03:34 socket.lua</span><br></pre></td></tr></table></figure>

<hr>
<ol start="3">
<li>安装成功后,  可以简单的测试一下。</li>
</ol>
<ul>
<li>利用<strong>Docker</strong>启动<strong>Redis</strong>容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -ti -d -p 6379:6379 redis</span><br></pre></td></tr></table></figure>

<ul>
<li>测试脚本<code>hello_redis.lua</code></li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">"redis"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> client = redis.connect(<span class="string">"127.0.0.1"</span>, <span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> response = client:ping()</span><br><span class="line"><span class="keyword">if</span> response == <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">client:set(<span class="string">"hello"</span>, <span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> var = client:get(<span class="string">"hello"</span>)</span><br><span class="line"><span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure>

<ul>
<li>可能会存在环境变量不对导致的报错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luajit hello_redis.lua</span><br><span class="line">	luajit: /usr/<span class="built_in">local</span>/share/lua/5.1/redis.lua:793: module <span class="string">'socket'</span> not found:</span><br><span class="line">	no field package.preload[<span class="string">'socket'</span>]</span><br><span class="line">	no file <span class="string">'./socket.lua'</span></span><br><span class="line">	no file <span class="string">'/usr/local/share/luajit-2.0.5/socket.lua'</span></span><br><span class="line">	no file <span class="string">'/usr/local/share/lua/5.1/socket.lua'</span></span><br><span class="line">	no file <span class="string">'/usr/local/share/lua/5.1/socket/init.lua'</span></span><br><span class="line">	no file <span class="string">'./socket.so'</span></span><br><span class="line">	no file <span class="string">'/usr/local/lib/lua/5.1/socket.so'</span></span><br><span class="line">	no file <span class="string">'/usr/local/lib/lua/5.1/loadall.so'</span></span><br><span class="line">stack traceback:</span><br><span class="line">	[C]: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">'require'</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/share/lua/5.1/redis.lua:793: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">'create_connection'</span></span><br><span class="line">	/usr/<span class="built_in">local</span>/share/lua/5.1/redis.lua:836: <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">'connect'</span></span><br><span class="line">	a.lua:3: <span class="keyword">in</span> main chunk</span><br><span class="line">	[C]: at 0x56508049e440</span><br></pre></td></tr></table></figure>

<ul>
<li>执行<code>luarocks path --bin</code> 并将结果输入</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luarocks path --bin</span><br><span class="line">Warning: The directory <span class="string">'/home/canon/.cache/luarocks'</span> or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing /usr/<span class="built_in">local</span>/bin/luarocks with sudo, you may want sudo<span class="string">'s -H flag.</span></span><br><span class="line"><span class="string">export LUA_PATH='</span>/home/canon/.luarocks/share/lua/5.1/?.lua;/home/canon/.luarocks/share/lua/5.1/?/init.lua;/usr/<span class="built_in">local</span>/share/lua/5.1/?.lua;/usr/<span class="built_in">local</span>/share/lua/5.1/?/init.lua;./?.lua;/usr/<span class="built_in">local</span>/share/luajit-2.0.5/?.lua<span class="string">'</span></span><br><span class="line"><span class="string">export LUA_CPATH='</span>/home/canon/.luarocks/lib/lua/5.1/?.so;/usr/<span class="built_in">local</span>/lib/lua/5.1/?.so;./?.so;/usr/<span class="built_in">local</span>/lib/lua/5.1/loadall.so<span class="string">'</span></span><br><span class="line"><span class="string">export PATH='</span>/home/canon/.luarocks/bin:/usr/<span class="built_in">local</span>/bin:/home/canon/anaconda3/bin:/home/canon/anaconda3/condabin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin<span class="string">'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行脚本, 将会看到如下输出:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ luajit hello_redis.lua</span><br><span class="line">world</span><br></pre></td></tr></table></figure>

<h2 id="CJson"><a href="#CJson" class="headerlink" title="CJson"></a>CJson</h2><p>​        这里<strong>强烈建议</strong>大家使用CJson模块, 我之前为了测试随便从github上找了个json模块来使用。这几天发现在网站的高峰时期 Suricata <strong>app_layer.flow</strong> 这个字段非常的大, 从而导致了 <strong>kernel_drops</strong>。由于我们的网站是面对海外用户有时差, 经过几天的熬夜最终定位到是由于json模块太过于消耗性能而导致。可以看下这个截图:</p>
<ul>
<li>启用CJson模块之前的监控图</li>
</ul>
<p><img src="/2019/10/24/Suricata+Lua实现本地情报对接/image-20191104103020962.png" alt="image-20191104103020962"></p>
<ul>
<li>启用CJson模块之后的监控图</li>
</ul>
<p><img src="/2019/10/24/Suricata+Lua实现本地情报对接/image-20191104103557884.png" alt="image-20191104103557884"></p>
<ol>
<li>下载CJson模块</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget 下载</span></span><br><span class="line">$ wget https://www.kyne.com.au/~mark/software/download/lua-cjson-2.1.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git</span></span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:mpx/lua-cjson.git</span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li>根据Lua环境修改Makefile(个人配置)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##### Build defaults #####</span></span><br><span class="line">LUA_VERSION =       5.1</span><br><span class="line">TARGET =            cjson.so</span><br><span class="line">PREFIX =            /usr/<span class="built_in">local</span></span><br><span class="line"><span class="comment">#CFLAGS =            -g -Wall -pedantic -fno-inline</span></span><br><span class="line">CFLAGS =            -O3 -Wall -pedantic -DNDEBUG</span><br><span class="line">CJSON_CFLAGS =      -fpic</span><br><span class="line">CJSON_LDFLAGS =     -shared</span><br><span class="line">LUA_INCLUDE_DIR =   $(PREFIX)/include/luajit-2.0</span><br><span class="line">LUA_CMODULE_DIR =   $(PREFIX)/lib/lua/$(LUA_VERSION)</span><br><span class="line">LUA_MODULE_DIR =    $(PREFIX)/share/lua/$(LUA_VERSION)</span><br><span class="line">LUA_BIN_DIR =       $(PREFIX)/bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make</span><br><span class="line">cc -c -O3 -Wall -pedantic -DNDEBUG  -I/usr/<span class="built_in">local</span>/include/luajit-2.0 -fpic -o lua_cjson.o lua_cjson.c</span><br><span class="line">In file included from lua_cjson.c:47:0:</span><br><span class="line">fpconv.h:15:20: warning: inline <span class="keyword">function</span> ‘fpconv_init’ declared but never defined</span><br><span class="line"> extern inline void fpconv_init();</span><br><span class="line">                    ^~~~~~~~~~~</span><br><span class="line">cc -c -O3 -Wall -pedantic -DNDEBUG  -I/usr/<span class="built_in">local</span>/include/luajit-2.0 -fpic -o strbuf.o strbuf.c</span><br><span class="line">cc -c -O3 -Wall -pedantic -DNDEBUG  -I/usr/<span class="built_in">local</span>/include/luajit-2.0 -fpic -o fpconv.o fpconv.c</span><br><span class="line">cc  -shared -o cjson.so lua_cjson.o strbuf.o fpconv.o</span><br><span class="line"></span><br><span class="line">$ make install</span><br><span class="line">mkdir -p //usr/<span class="built_in">local</span>/lib/lua/5.1</span><br><span class="line">cp cjson.so //usr/<span class="built_in">local</span>/lib/lua/5.1</span><br><span class="line">chmod 755 //usr/<span class="built_in">local</span>/lib/lua/5.1/cjson.so</span><br></pre></td></tr></table></figure>

<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><p>扩展登录接口审计脚本: <code>http_audit.lua</code></p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">json = <span class="built_in">require</span> <span class="string">"cjson.safe"</span></span><br><span class="line">md5 = <span class="built_in">require</span> <span class="string">"md5"</span></span><br><span class="line">redis = <span class="built_in">require</span> <span class="string">"redis"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录接口</span></span><br><span class="line">login_url = <span class="string">"/login"</span></span><br><span class="line"><span class="comment">-- 登录错误提示</span></span><br><span class="line">success_code = <span class="number">0</span></span><br><span class="line"><span class="comment">-- event_name</span></span><br><span class="line">event_name = <span class="string">"login_audit"</span></span><br><span class="line"><span class="comment">-- event_type</span></span><br><span class="line">event_type = <span class="string">"lua"</span></span><br><span class="line"><span class="comment">-- logs</span></span><br><span class="line">name = <span class="string">"login_audit.json"</span></span><br><span class="line"><span class="comment">-- 协议</span></span><br><span class="line">proto = <span class="string">"TCP"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- redis_config</span></span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- common_mapping</span></span><br><span class="line">http_common_mapping = <span class="string">'&#123;"accept":"accept","accept-charset":"accept_charset","accept-encoding":"accept_encoding","accept-language":"accept_language","user-agent":"user_agent"&#125;'</span></span><br><span class="line">common_mapping_table = json.decode(http_common_mapping)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- defind functioin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5Encode</span><span class="params">(args)</span></span></span><br><span class="line">    m = md5.new()</span><br><span class="line">    m:update(args)</span><br><span class="line">    <span class="keyword">return</span> md5.tohex(m:finish())</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatStr</span><span class="params">(args)</span></span></span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    ios = <span class="built_in">string</span>.<span class="built_in">match</span>(args, <span class="string">'canon'</span>)</span><br><span class="line">    <span class="keyword">if</span> ios ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        mail = <span class="string">'email"%s+(.-)%s'</span></span><br><span class="line">        t[<span class="string">'email'</span>] = <span class="built_in">string</span>.<span class="built_in">match</span>(args, mail)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        data = <span class="built_in">string</span>.split(args, <span class="string">'&amp;'</span>)</span><br><span class="line">        <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(data) <span class="keyword">do</span></span><br><span class="line">            d = <span class="built_in">string</span>.split(v, <span class="string">'='</span>)</span><br><span class="line">            t[d[<span class="number">1</span>]] = d[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(s, p)</span></span></span><br><span class="line">    rt = &#123;&#125;</span><br><span class="line">    <span class="built_in">string</span>.<span class="built_in">gsub</span>(s, <span class="string">'[^'</span>..p..<span class="string">']+'</span>, <span class="function"><span class="keyword">function</span><span class="params">(w)</span></span> <span class="built_in">table</span>.<span class="built_in">insert</span>(rt, w) <span class="keyword">end</span> )</span><br><span class="line">    <span class="keyword">return</span> rt</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- default function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span> <span class="params">(args)</span></span></span><br><span class="line">    <span class="keyword">local</span> needs = &#123;&#125;</span><br><span class="line">    needs[<span class="string">"protocol"</span>] = <span class="string">"http"</span></span><br><span class="line">    <span class="keyword">return</span> needs</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span> <span class="params">(args)</span></span></span><br><span class="line">    filename = SCLogPath() .. <span class="string">"/"</span> .. name</span><br><span class="line">    file = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">"a"</span>))</span><br><span class="line">    SCLogInfo(<span class="string">"app_login_audit filename: "</span> .. filename)</span><br><span class="line">    http = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">-- Connect Redis Server</span></span><br><span class="line">    SCLogInfo(<span class="string">"Connect Redis Server..."</span>)</span><br><span class="line">    client = redis.connect(host, port)</span><br><span class="line">    response = client:ping()</span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">then</span></span><br><span class="line">        SCLogInfo(<span class="string">"Redis Server connection succeeded."</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(args)</span></span></span><br><span class="line">    <span class="comment">-- init tables</span></span><br><span class="line">    http_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- ti tables</span></span><br><span class="line">    ti = &#123;</span><br><span class="line">        tags = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- init score</span></span><br><span class="line">    score = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_hostname &amp; http_url</span></span><br><span class="line">    http_hostname = HttpGetRequestHost()</span><br><span class="line">    http_url = HttpGetRequestUriNormalized()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- http_method</span></span><br><span class="line">    rl = HttpGetRequestLine()</span><br><span class="line">    <span class="keyword">if</span> rl <span class="keyword">then</span></span><br><span class="line">        http_method = <span class="built_in">string</span>.<span class="built_in">match</span>(rl, <span class="string">"%w+"</span>)</span><br><span class="line">        <span class="keyword">if</span> http_method <span class="keyword">then</span></span><br><span class="line">            http_table[<span class="string">"method"</span>] = http_method</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	  <span class="comment">-- 为了保证 Suricata 的性能不受影响, 严格控制过滤条件</span></span><br><span class="line">    <span class="keyword">if</span> http_url == login_url <span class="keyword">and</span> http_method == <span class="string">"POST"</span> <span class="keyword">then</span></span><br><span class="line">        http_table[<span class="string">"hostname"</span>] = http_hostname</span><br><span class="line">        http_table[<span class="string">"url"</span>] = http_url</span><br><span class="line">        http_table[<span class="string">"url_path"</span>] = http_url</span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- http_status &amp; http_protocol</span></span><br><span class="line">        rsl = HttpGetResponseLine()</span><br><span class="line">        <span class="keyword">if</span> rsl <span class="keyword">then</span></span><br><span class="line">            status_code = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">"%s(%d+)%s"</span>)</span><br><span class="line">            http_table[<span class="string">"status"</span>] = <span class="built_in">tonumber</span>(status_code)</span><br><span class="line"></span><br><span class="line">            http_protocol = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">"(.-)%s"</span>)</span><br><span class="line">            http_table[<span class="string">"protocol"</span>] = http_protocol</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- login_results</span></span><br><span class="line">        a, o, e = HttpGetResponseBody()</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">                body = json.decode(v)</span><br><span class="line">                results_code = <span class="built_in">tonumber</span>(body[<span class="string">"code"</span>])</span><br><span class="line">                <span class="keyword">if</span> results_code == success_code <span class="keyword">then</span></span><br><span class="line">                    http_table[<span class="string">"results"</span>] = <span class="string">"success"</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    http_table[<span class="string">"results"</span>] = <span class="string">"failed"</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            http_table[<span class="string">"results_code"</span>] = results_code</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">--[[</span></span><br><span class="line"><span class="comment">            1. 获取用户登录email 并查询 Redis中是否存在该账号</span></span><br><span class="line"><span class="comment">            2. 根据结果进行相应的打分以及tags标注</span></span><br><span class="line"><span class="comment">        ]]</span></span><br><span class="line">        <span class="comment">-- </span></span><br><span class="line">        a, o, e = HttpGetRequestBody()</span><br><span class="line">        <span class="keyword">if</span> a <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">                res = formatStr(v)</span><br><span class="line">                <span class="keyword">if</span> res[<span class="string">"email"</span>] <span class="keyword">then</span></span><br><span class="line">                    <span class="comment">-- 查询Redis对比黑名单</span></span><br><span class="line">                    black_ioc = client:get(res[<span class="string">"email"</span>])</span><br><span class="line">                    <span class="keyword">if</span> black_ioc <span class="keyword">then</span></span><br><span class="line">                        ti[<span class="string">"provider"</span>] = <span class="string">"Canon"</span></span><br><span class="line">                        ti[<span class="string">"producer"</span>] = <span class="string">"NTA"</span></span><br><span class="line">                        <span class="built_in">table</span>.<span class="built_in">insert</span>(ti[<span class="string">"tags"</span>], <span class="string">"account in blacklist"</span>)</span><br><span class="line">                        score = score + <span class="number">10</span></span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- RequestHeaders</span></span><br><span class="line">        rh = HttpGetRequestHeaders()</span><br><span class="line">        <span class="keyword">if</span> rh <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rh) <span class="keyword">do</span></span><br><span class="line">                key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line">                request_var = request_mapping_table[key]</span><br><span class="line">                <span class="keyword">if</span> request_var <span class="keyword">then</span></span><br><span class="line">                    http_table[request_var] = v</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- ResponseHeaders</span></span><br><span class="line">        rsh = HttpGetResponseHeaders()</span><br><span class="line">        <span class="keyword">if</span> rsh <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rsh) <span class="keyword">do</span></span><br><span class="line">                key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line">                response_var = response_mapping_table[key]</span><br><span class="line">                <span class="keyword">if</span> response_var <span class="keyword">then</span></span><br><span class="line">                    http_table[response_var] = v</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- timestring</span></span><br><span class="line">        sec, usec = SCPacketTimestamp()</span><br><span class="line">        timestring = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">"!%Y-%m-%dT%T"</span>, sec) .. <span class="string">'.'</span> .. usec .. <span class="string">'+0000'</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- flow_info</span></span><br><span class="line">        ip_version, src_ip, dst_ip, protocol, src_port, dst_port = SCFlowTuple()</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- flow_id</span></span><br><span class="line">        id = SCFlowId()</span><br><span class="line">        flow_id = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%.0f"</span>, id)</span><br><span class="line">        flow_id = <span class="built_in">tonumber</span>(flow_id)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- true_ip</span></span><br><span class="line">        true_client_ip = HttpGetRequestHeader(<span class="string">"True-Client-IP"</span>)</span><br><span class="line">        <span class="keyword">if</span> true_client_ip ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            src_ip = true_client_ip</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- session_id</span></span><br><span class="line">        tetrad = src_ip .. src_port .. dst_ip .. dst_port</span><br><span class="line">        session_id = md5Encode(tetrad)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- table</span></span><br><span class="line">        raw_data = &#123;</span><br><span class="line">            timestamp = timestring,</span><br><span class="line">            flow_id = flow_id,</span><br><span class="line">            session_id = session_id,</span><br><span class="line">            src_ip = src_ip,</span><br><span class="line">            src_port = src_port,</span><br><span class="line">            proto = proto,</span><br><span class="line">            dest_ip = dst_ip,</span><br><span class="line">            dest_port = dst_port,</span><br><span class="line">            event_name = event_name,</span><br><span class="line">            event_type = event_type,</span><br><span class="line">            app_type = app_type,</span><br><span class="line">            http = http_table,</span><br><span class="line">            ti = ti,</span><br><span class="line">            score = score</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- json encode</span></span><br><span class="line">        data = json.encode(raw_data)</span><br><span class="line"></span><br><span class="line">        file:<span class="built_in">write</span>(data .. <span class="string">"\n"</span>)</span><br><span class="line">        file:<span class="built_in">flush</span>()</span><br><span class="line"></span><br><span class="line">        http = http + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deinit</span> <span class="params">(args)</span></span></span><br><span class="line">    SCLogInfo (<span class="string">"app_login_audit transactions logged: "</span> .. http);</span><br><span class="line">    file:<span class="built_in">close</span>(file)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p><strong>简单说下以上脚本的功能:</strong></p>
<ol>
<li>登录接口的用户名审计(废话…); </li>
<li>通过请求<strong>Redis</strong>比对当前用户是否在黑名单中, 并进行相应的打分、标签处理;</li>
<li>根据自定义的需求获取的http headers, 这个对于业务安全上还是有点用的;</li>
<li>针对<strong>CDN</strong>或者Nginx这种场景下, 可以直接对 xff 或者 true_client_ip 进行四元组的hash, 得到<strong>session_id</strong>, 这样溯源的时候会比较方便。因为在这种场景下传统的四层<strong>flow_id</strong>就不是那么有用了。</li>
<li>后续可以追加一些简单的检测方法, 例如:<ol>
<li>检查请求头中的字段是否完成;</li>
<li>检查请求头中的某个字段长度是否符合合规;</li>
<li>……</li>
</ol>
</li>
</ol>
<p><strong>配置Suricata启用Lua脚本</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">- lua:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">    scripts-dir:</span> <span class="string">/etc/suricata/lua-output/</span></span><br><span class="line"><span class="attr">    scripts:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">login_audit.lua</span></span><br></pre></td></tr></table></figure>

<p><strong>启用Suricata</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ suricata -vvv --pfring -k none -c /etc/suricata/suricata.yaml</span><br></pre></td></tr></table></figure>

<p><strong><em>注: 这里<code>-vvv</code> 参数建议加上. 如果你的Lua脚本有一些问题, 如果加上了这个参数, 就可以通过这个日志看出。</em></strong></p>
<h1 id="日志样例"><a href="#日志样例" class="headerlink" title="日志样例"></a>日志样例</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"src_port"</span>: <span class="number">62722</span>,</span><br><span class="line">    <span class="attr">"score"</span>: <span class="number">65</span>,</span><br><span class="line">    <span class="attr">"session_id"</span>: <span class="string">"c863aeb2ef8d1b37f3257f8c210bf440"</span>,</span><br><span class="line">    <span class="attr">"ti"</span>: &#123;</span><br><span class="line">        <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"account in blacklist"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"provider"</span>: <span class="string">"Canon"</span>,</span><br><span class="line">        <span class="attr">"producer"</span>: <span class="string">"NTA"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"alert"</span>: &#123;</span><br><span class="line">        <span class="attr">"alerted"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"rules"</span>: &#123;</span><br><span class="line">            <span class="attr">"请求头校验"</span>: <span class="string">"dev-id"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"proto"</span>: <span class="string">"TCP"</span>,</span><br><span class="line">    <span class="attr">"flow_id"</span>: <span class="string">"1064295903559076"</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-10-25T08:33:55.585519+0000"</span>,</span><br><span class="line">    <span class="attr">"event_type"</span>: <span class="string">"lua"</span>,</span><br><span class="line">    <span class="attr">"src_ip"</span>: <span class="string">"1.1.1.1"</span>,</span><br><span class="line">    <span class="attr">"dest_port"</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">"http"</span>: &#123;</span><br><span class="line">        <span class="attr">"response_content_length"</span>: <span class="string">"96"</span>,</span><br><span class="line">        <span class="attr">"response_content_type"</span>: <span class="string">"application/json; charset=UTF-8"</span>,</span><br><span class="line">        <span class="attr">"accept_encoding"</span>: <span class="string">"gzip"</span>,</span><br><span class="line">        <span class="attr">"accept"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        <span class="attr">"results_code"</span>: <span class="number">400504</span>,</span><br><span class="line">        <span class="attr">"server"</span>: <span class="string">"nginx"</span>,</span><br><span class="line">        <span class="attr">"date"</span>: <span class="string">"Fri, 25 Oct 2019 08:33:55 GMT"</span>,</span><br><span class="line">        <span class="attr">"app_version"</span>: <span class="string">"6.6.0"</span>,</span><br><span class="line">        <span class="attr">"request_content_type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">        <span class="attr">"user_agent"</span>: <span class="string">"okhttp/3.12.0"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"/login"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"canon@gmail.com"</span>,</span><br><span class="line">        <span class="attr">"results"</span>: <span class="string">"failed"</span>,</span><br><span class="line">        "pragma": "no-cache",-</span><br><span class="line">        "cache_control": "no-cache, max-age=0, no-store",</span><br><span class="line">        "connection": "keep-alive",</span><br><span class="line">        "status": 200,</span><br><span class="line">        "protocol": "HTTP/1.1",</span><br><span class="line">        "hostname": "x.x.x.x",</span><br><span class="line">        "url_path": "/login",</span><br><span class="line">        "method": "POST",</span><br><span class="line">        "device": "RMX1920 Android8.0.0",</span><br><span class="line">        "device_type": "Android",</span><br><span class="line">        "request_content_length": "39"</span><br><span class="line">    &#125;,</span><br><span class="line">    "event_name": "login_audit",</span><br><span class="line">    "dest_ip": "2.2.2.2"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Wazuh - 黑名单匹配告警(CDB list)</title>
    <url>/2019/10/18/Wazuh-Using-CDB-lists/</url>
    <content><![CDATA[<p><strong>需求:</strong></p>
<p>​        现有一批高危用户, 需要实时关注该账号的登录情况。由于之前已经写好了一个针对用户登录账号的审计规则, 因此, 这里需要用到<strong><a href="https://documentation.wazuh.com/3.10/user-manual/ruleset/cdb-list.html" target="_blank" rel="noopener">Wazuh CDB list</a></strong>这个功能(<em>此功能主要用例是创建用户，IP或域名的白/黑列表。</em>)消费审计规则数据即可。</p>
<hr>
<ol>
<li><strong>新建列表</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more blacklist</span><br><span class="line"></span><br><span class="line">admin:</span><br><span class="line">root:</span><br><span class="line">administrator:</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>将列表文件添加到<code>ossec.conf</code></strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more ossec.conf</span><br><span class="line"></span><br><span class="line">&lt;ossec_config&gt;</span><br><span class="line">	&lt;ruleset&gt;</span><br><span class="line">    &lt;!-- User-defined CDB list --&gt;</span><br><span class="line">    &lt;list&gt;etc/lists/blacklist&lt;/list&gt;</span><br><span class="line">	&lt;/ruleset&gt;</span><br><span class="line">&lt;/ossec_config&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>编译列表</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /var/ossec/bin/ossec-makelists</span><br><span class="line"></span><br><span class="line"> * File etc/lists/blacklist.cdb needs to be updated</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><strong>重启进程</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart wazuh-manager</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><strong>配置规则</strong></li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">"local,blacklist,"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Defind blacklist Rules --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ID: 100150 - 100199 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">id</span>=<span class="string">"100163"</span> <span class="attr">level</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if_sid</span>&gt;</span>100303<span class="tag">&lt;/<span class="name">if_sid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span> <span class="attr">field</span>=<span class="string">"http.email"</span> <span class="attr">lookup</span>=<span class="string">"match_key"</span>&gt;</span>etc/lists/blacklist<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Wazuh Rules - High-risk user login detected. $(src_ip) -&gt; $(http.email) -&gt; $(http.hostname) -&gt; $(http.url) = $(http.results).<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">options</span>&gt;</span>no_full_log<span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span>blacklist,<span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li><strong>测试规则</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./ossec-logtest</span><br><span class="line">2019/10/18 15:06:47 ossec-testrule: INFO: Started (pid: 2184).</span><br><span class="line">ossec-testrule: Type one <span class="built_in">log</span> per line.</span><br><span class="line"></span><br><span class="line">**Phase 3: Completed filtering (rules).</span><br><span class="line">       Rule id: <span class="string">'100163'</span></span><br><span class="line">       Level: <span class="string">'12'</span></span><br><span class="line">       Description: <span class="string">'Wazuh Rules - High-risk user login detected. 1.1.1.1 -&gt; admin -&gt; canon88.github.io -&gt; /user/login = success.'</span></span><br><span class="line">**Alert to be generated.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HIDS</category>
      </categories>
      <tags>
        <tag>Wazuh</tag>
      </tags>
  </entry>
  <entry>
    <title>我在'云'上的日子 - AWS上流量镜像遇到的坑</title>
    <url>/2019/10/16/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90-AWS%E4%B8%8A%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<p>​    </p>
<p>​        自从AWS在6月份新出了<strong>Traffic Mirroring</strong>功能后, 我也算是第一时间使用了这个功能。与传统的交换机流量镜像不同的是, AWS上是将流量镜像后的数据通过<strong>VXLAN</strong>协议发送至流量分析引擎(<strong>Suricata</strong>、<strong>Zeek</strong>)。正是由于这一点让我碰到了以下几个问题, 这里写出来希望对大家有所帮助。</p>
<ol>
<li>接收流量镜像的目标端, 也就是我们常说的流量分析引擎端是有接收限制的。</li>
</ol>
<p>​       如果你是在一个非专用实例上部署的Suricata、Zeek。那么你只能最多同时接收10个源的流量镜像, 也就是你只能接收10个网卡的数据。很不巧的是我们碰上了这个问题, 解决方案也很简单, 使用专用实例(<strong>Dedicated instance</strong>) 或者 使用AWS的网络负载均衡(<strong>Network Load Balancer</strong>)。前者可以将Limit提升到<strong>100</strong>, 后者将<strong>不受限</strong>。如图:</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016164935291.png" alt="image-20191016164935291"></p>
<hr>
<ol start="2">
<li>C5与C4实例的差异</li>
</ol>
<p>​        就我目前使用的实例而言, 分别测试过C5 与 C4两种实例。他们的网卡驱动有所区别的, 如图:</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016160923628.png" alt="image-20191016160923628"></p>
<p>​        我这使用下来最直观的区别, 在C4实例上若不使用PF_RING捕包模式的话, Suricata丢包率感人, 0.5 Gbps就开始丢包。测试的机器配置: 32C 60G的机器, 切换到PF_RING捕包模式无此问题。反之C5实例就不存在这个问题, AF-PACKET直接上到2 Gbps的纯HTTP流量都没有丢包。硬件配置: 16C 32G的机器。</p>
<hr>
<ol start="3">
<li>超过<strong>MTU: 9001</strong>数据包被截断</li>
</ol>
<p>​      这几天在排查安全事件时, 发现监控的同一台Nginx上解析出的流量(HTTP事件)与日志(HTTP事件)数量相差较大。经过两天的排查终于定位了问题, Suricata kernel 并没有丢包, 所以怀疑是不是Suricata HTTP解析出错导致。最终通过抓包发现导致该问题的”罪魁祸首”就是<strong>VXLAN</strong>, 由于AWS在流量镜像时采用了<strong>VXLAN</strong>协议进行封装, 导致在原有<strong>MTU</strong>的基础上<strong>增加了50个字节</strong>, 造成数据包被截断, 无法还原出HTTP事件。以下截图就是一个无法被正确还原HTTP事件的数据包, 我用Suricata载入数据包后, 只还原出了长度<strong>9015</strong>数据包之前的HTTP信息, 长度<strong>9015</strong>数据包之后的所有事件均无法被还原。</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191014095249725.png" alt="image-20191014095249725"></p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191014094741753.png" alt="image-20191014094741753"></p>
<p><strong>官方描述:</strong></p>
<p>​        For example, if an 8996 byte packet is mirrored, and the traffic mirror target MTU value is 9001 bytes, the mirror encapsulation results in the mirrored packet being greater than the MTU value. In this case, the mirror packet is truncated. To prevent mirror packets from being truncated, set the traffic mirror source interface MTU value to 54 bytes less than the traffic mirror target MTU value. For more information about configuring the network MTU value, see Network Maximum Transmission Unit (MTU) for Your EC2 Instance in the <em>Amazon EC2 User Guide for Linux Instances</em>.</p>
<p>​        例如，如果对8996字节的数据包进行了镜像，并且流量镜像目标MTU值为9001字节，则镜像封装会导致镜像的数据包大于MTU值。在这种情况下，镜像数据包将被截断。为防止镜像数据包被截断，请将流量镜像源接口的MTU值设置为比流量镜像目标MTU值小54个字节。有关配置网络MTU值的更多信息，请参阅Amazon EC2 Linux实例用户指南中的EC2实例的网络最大传输单位（MTU）。</p>
<hr>
<p><strong>关于VXLAN导致Suricata无法正常解析数据的问题, 特地进行了测试:</strong></p>
<p>准备工作:</p>
<ul>
<li>新建了<strong>test_files</strong>文件, 该文件只包含内容’<strong>hello, world!</strong>‘;</li>
<li>为了使数据包在传输时满足<strong>MTU: 9001</strong>, 手动生成了一个10MB空文件<strong>10mb_exist_files</strong>. </li>
</ul>
<p>共计访问: 14次</p>
<p>访问顺序:</p>
<ol>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong>  3 (次)</li>
<li>Client -&gt; Web Server -&gt; <strong>10mb_exist_files</strong> 1 (次)</li>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong> 10 (次)</li>
</ol>
<p>正常情况:</p>
<ul>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong>  3 (次) - 正常</li>
<li>Client -&gt; Web Server -&gt; <strong>10mb_exist_files</strong> 1 (次) - 正常</li>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong> 10 (次) - 正常</li>
</ul>
<p>异常情况:</p>
<ul>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong>  3 (次) - 正常</li>
<li>Client -&gt; Web Server -&gt; <strong>10mb_exist_files</strong> 1 (次) - 异常</li>
<li>Client -&gt; Web Server -&gt; <strong>test_files</strong> 10 (次) - 丢失</li>
</ul>
<p><strong>MTU: 9001</strong></p>
<ul>
<li>非镜像流量的数据包详情:</li>
</ul>
<p>可以看到从数据包<strong>20</strong>到数据包<strong>6126</strong>之间都是在进行<strong>10MB</strong>文件(<strong>10mb_exist_files</strong>)的传输过程。</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016103409831.png" alt="image-20191016103409831"></p>
<hr>
<p>从http数据包中可以看出, 这里请求包与响应包都可以正常被还原出来。</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016104502919.png" alt="image-20191016104502919"></p>
<hr>
<p>数据包在Suricata上的解析结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat http-2019-10-16.json | wc -l</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-10-15T22:52:10.180505+0800"</span>,</span><br><span class="line">    <span class="attr">"flow_id"</span>: <span class="number">415026399241324</span>,</span><br><span class="line">    <span class="attr">"pcap_cnt"</span>: <span class="number">6127</span>,</span><br><span class="line">    <span class="attr">"event_type"</span>: <span class="string">"http"</span>,</span><br><span class="line">    <span class="attr">"src_ip"</span>: <span class="string">"y.y.y.y"</span>,</span><br><span class="line">    <span class="attr">"src_port"</span>: <span class="number">43418</span>,</span><br><span class="line">    <span class="attr">"dest_ip"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">    <span class="attr">"dest_port"</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">"proto"</span>: <span class="string">"TCP"</span>,</span><br><span class="line">    <span class="attr">"tx_id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"http"</span>: &#123;</span><br><span class="line">        <span class="attr">"hostname"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">        <span class="attr">"http_port"</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"/file/10mb_exist_files"</span>,</span><br><span class="line">        <span class="attr">"http_user_agent"</span>: <span class="string">"python-requests/1.2.3 CPython/2.7.16 Linux/4.14.123-86.109.amzn1.x86_64"</span>,</span><br><span class="line">        <span class="attr">"http_content_type"</span>: <span class="string">"text/html"</span>,</span><br><span class="line">        <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="attr">"accept_encoding"</span>: <span class="string">"gzip, deflate, compress"</span>,</span><br><span class="line">        <span class="attr">"content_length"</span>: <span class="string">"41943044"</span>,</span><br><span class="line">        <span class="attr">"content_type"</span>: <span class="string">"text/html; charset=utf-8"</span>,</span><br><span class="line">        <span class="attr">"date"</span>: <span class="string">"Tue, 15 Oct 2019 14:52:10 GMT"</span>,</span><br><span class="line">        <span class="attr">"server"</span>: <span class="string">"Werkzeug/0.16.0 Python/2.7.16"</span>,</span><br><span class="line">        <span class="attr">"http_method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">"length"</span>: <span class="number">41943044</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>镜像流量的数据包详情:</strong>(也就是<strong>VXLAN</strong>封装后的数据包)</li>
</ul>
<p>同样可以看到从数据包<strong>26</strong>到数据包<strong>6170</strong>之间都是在进行<strong>10MB</strong>文件(<strong>10mb_exist_files</strong>)的传输过程。但是在第<strong>34</strong>个数据包中可以看到, 已经标注了数据超出了最大长度。</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016105636906.png" alt="image-20191016105636906"></p>
<hr>
<p>超出长度的数据将会被截断, 标注: <strong>50 bytes missing in capture file</strong>。</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016150322620.png" alt="image-20191016150322620"></p>
<p>从HTTP数据包中可以看出, 这里只有请求包, 由于后续的响应包超出了<strong>MTU: 9001</strong>,  因此并没有响应包。</p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016105948606.png" alt="image-20191016105948606"></p>
<hr>
<p>数据包在Suricata上的解析结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat http-2019-10-16.json | wc -l</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-10-15T22:52:48.295823+0800"</span>,</span><br><span class="line">    <span class="attr">"flow_id"</span>: <span class="number">1746715371266426</span>,</span><br><span class="line">    <span class="attr">"event_type"</span>: <span class="string">"http"</span>,</span><br><span class="line">    <span class="attr">"src_ip"</span>: <span class="string">"y.y.y.y"</span>,</span><br><span class="line">    <span class="attr">"src_port"</span>: <span class="number">43420</span>,</span><br><span class="line">    <span class="attr">"dest_ip"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">    <span class="attr">"dest_port"</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">"proto"</span>: <span class="string">"TCP"</span>,</span><br><span class="line">    <span class="attr">"tx_id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"http"</span>: &#123;</span><br><span class="line">        <span class="attr">"hostname"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">        <span class="attr">"http_port"</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"/file/10mb_exist_files"</span>,</span><br><span class="line">        <span class="attr">"http_user_agent"</span>: <span class="string">"python-requests/1.2.3 CPython/2.7.16 Linux/4.14.123-86.109.amzn1.x86_64"</span>,</span><br><span class="line">        <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="attr">"accept_encoding"</span>: <span class="string">"gzip, deflate, compress"</span>,</span><br><span class="line">        <span class="attr">"http_method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">"length"</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>结论:</strong></p>
<p>​        相比非镜像流量的数据包, Suricata 少了后续10条http请求的数据解析。针对访问<strong>10mb_exist_files</strong>的请求, 由于超过了MTU, 数据包被阶段了, http的解析数据也是不完整的。</p>
<p><strong>解决方案:</strong></p>
<p>​        这里直接引用AWS的官方文档描述。如果对8996字节的数据包进行了镜像，并且流量镜像目标MTU值为9001字节，则镜像封装会导致镜像的数据包大于MTU值。在这种情况下，镜像数据包将被截断。为防止镜像数据包被截断，请将流量镜像源接口的MTU值设置为比流量镜像目标MTU值小54个字节。有关配置网络MTU值的更多信息，请参阅Amazon EC2 Linux实例用户指南中的EC2实例的网络最大传输单位（MTU）。</p>
<p>​        一般来说，降低 MTU 的话，有可能发现网路传输效能有下降，这是因为每个封包 size 变小，所以传送同样的资料量，封包数就会变多，造成 overhead 变多。但是对于传输是不会产生错误的状况的。</p>
<hr>
<p><strong>MTU:1500</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip link show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 9001 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 02:8a:2d:87:02:8e brd ff:ff:ff:ff:ff:ff</span><br><span class="line"></span><br><span class="line">$ sudo ip link <span class="built_in">set</span> dev eth0 mtu 1500</span><br><span class="line"></span><br><span class="line">$ ip link show eth0</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000</span><br><span class="line">    link/ether 02:8a:2d:87:02:8e brd ff:ff:ff:ff:ff:ff</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016154823748.png" alt="image-20191016154823748"></p>
<p><img src="/2019/10/16/我在云上的日子-AWS上流量镜像遇到的坑/image-20191016155112376.png" alt="image-20191016155112376"></p>
<p>数据包在Suricata上的解析结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat http-2019-10-16.json | wc -l</span><br><span class="line">14</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-10-16T15:14:15.576656+0800"</span>,</span><br><span class="line">    <span class="attr">"flow_id"</span>: <span class="number">1135596924232203</span>,</span><br><span class="line">    <span class="attr">"event_type"</span>: <span class="string">"http"</span>,</span><br><span class="line">    <span class="attr">"src_ip"</span>: <span class="string">"y.y.y.y"</span>,</span><br><span class="line">    <span class="attr">"src_port"</span>: <span class="number">43554</span>,</span><br><span class="line">    <span class="attr">"dest_ip"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">    <span class="attr">"dest_port"</span>: <span class="number">8000</span>,</span><br><span class="line">    <span class="attr">"proto"</span>: <span class="string">"TCP"</span>,</span><br><span class="line">    <span class="attr">"tx_id"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"http"</span>: &#123;</span><br><span class="line">        <span class="attr">"hostname"</span>: <span class="string">"x.x.x.x"</span>,</span><br><span class="line">        <span class="attr">"http_port"</span>: <span class="number">8000</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"/file/10mb_exist_files"</span>,</span><br><span class="line">        <span class="attr">"http_user_agent"</span>: <span class="string">"python-requests/1.2.3 CPython/2.7.16 Linux/4.14.123-86.109.amzn1.x86_64"</span>,</span><br><span class="line">        <span class="attr">"http_content_type"</span>: <span class="string">"text/html"</span>,</span><br><span class="line">        <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="attr">"accept_encoding"</span>: <span class="string">"gzip, deflate, compress\n"</span>,</span><br><span class="line">        <span class="attr">"content_length"</span>: <span class="string">"41943044"</span>,</span><br><span class="line">        <span class="attr">"content_type"</span>: <span class="string">"text/html; charset=utf-8"</span>,</span><br><span class="line">        <span class="attr">"date"</span>: <span class="string">"Wed, 16 Oct 2019 07:14:15 GMT"</span>,</span><br><span class="line">        <span class="attr">"server"</span>: <span class="string">"Werkzeug/0.16.0 Python/2.7.16"</span>,</span><br><span class="line">        <span class="attr">"http_method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">"length"</span>: <span class="number">41943044</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        结论: <strong>MTU减小到1500时</strong>, 无论从WireShark来查看或者Suricata协议还原的角度来说, 都是可以的。</p>
<hr>
<p>​        写在最后, 说实话AWS提供了在云上的流量镜像确实很不错, 至少比传统在云上每一台机器通过安装agent把流量外发的形式强, 似乎<strong>国内</strong>的云厂商现在也没有这个功能! </p>
<p>​        不过通过VXLAN将数据包封装后导致MTU超过最大值这问题也确实有点坑。你让已经成型的架构去调整MTU值, 虽然理论上是可行, 但实际生产环境中网络的调整都是比较慎重的, 除非企业现在必须得上流量镜像, 否则不太能说服运维的小伙伴去调整, 要是真出了什么问题, 都是大问题。</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://docs.aws.amazon.com/vpc/latest/mirroring/vpc-tm.pdf" target="_blank" rel="noopener">Amazon Virtual Private Cloud Traffic Mirroring</a></li>
<li><a href="https://community.emc.com/community/support/chinese/teamblog/blog/2016/05/12/大咖讲网络-mtu导致的悲剧" target="_blank" rel="noopener">大咖讲网络-mtu导致的悲剧</a></li>
<li><a href="https://www.cnblogs.com/sammyliu/p/5079898.html" target="_blank" rel="noopener">Neutron VxLAN + Linux Bridge 环境中的网络 MTU</a></li>
</ul>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Suricata - Lua Output Script</title>
    <url>/2019/10/14/Suricata%20-%20Lua%20Output/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    由于近期网站遭受大量撞库攻击, 想监控一下登录接口中的异常行为。通过<strong>alert</strong>并不能起到很好的效果, 所以采用<strong>Lua</strong>脚本进行扩展, 写了一个审计登录接口的脚本。通过登录接口事件, 再配合<strong>Wazuh</strong>进行一些简单的关联告警,  效果还是不错的。</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul>
<li>由于审计内容涉及到用户敏感信息, 因此需要对敏感信息进行<strong>Hash</strong>之后再输出;</li>
<li>除通用<strong>HTTP Header</strong>字段外支持对自定义字段进行选择性输出;</li>
</ul>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">json = <span class="built_in">require</span> <span class="string">"json"</span></span><br><span class="line">md5 = <span class="built_in">require</span> <span class="string">"md5"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录接口</span></span><br><span class="line">login_url = <span class="string">"/login"</span></span><br><span class="line"><span class="comment">-- 登录状态码</span></span><br><span class="line">success_code = <span class="number">0</span></span><br><span class="line"><span class="comment">-- event_name</span></span><br><span class="line">event_name = <span class="string">"login_audit"</span></span><br><span class="line"><span class="comment">-- event_type</span></span><br><span class="line">event_type = <span class="string">"lua"</span></span><br><span class="line"><span class="comment">-- app_type</span></span><br><span class="line">app_type = <span class="string">"web"</span></span><br><span class="line"><span class="comment">-- logs</span></span><br><span class="line">name = <span class="string">"web_login_audit.json"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- common_mapping</span></span><br><span class="line">http_common_mapping = <span class="string">'&#123;"accept":"accept","accept-charset":"accept_charset","accept-encoding":"accept_encoding","accept-language":"accept_language","accept-datetime":"accept_datetime","authorization":"authorization","cache-control":"cache_control","from":"from","max-forwards":"max_forwards","origin":"origin","pragma":"pragma","proxy-authorization":"proxy_authorization","via":"via","vary":"vary","x-requested-with":"x_requested_with","x-forwarded-proto":"x_forwarded_proto","accept-range":"accept_range","allow":"allow","connection":"connection","content-encoding":"content_encoding","content-language":"content_language","content-location":"content_location","content-md5":"content_md5","content-range":"content_range","date":"date","last-modified":"last_modified","location":"location","proxy-authenticate":"proxy_authenticate","referrer":"refer","retry-after":"retry_after","server":"server","transfer-encoding":"transfer_encoding","upgrade":"upgrade","www-authenticate":"www_authenticate","x-authenticated-user":"x_authenticated_user","user-agent":"user_agent"&#125;'</span></span><br><span class="line">common_mapping_table = json.decode(http_common_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- request_mapping</span></span><br><span class="line">http_request_mapping = <span class="string">'&#123;"content-length":"request_content_length","content-type":"request_content_type"&#125;'</span></span><br><span class="line">request_mapping_table = json.decode(http_request_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- response_mapping</span></span><br><span class="line">http_response_mapping = <span class="string">'&#123;"content-length":"response_content_length","content-type":"response_content_type"&#125;'</span></span><br><span class="line">response_mapping_table = json.decode(http_response_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- defind functioin</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5Encode</span><span class="params">(args)</span></span></span><br><span class="line">    m = md5.new()</span><br><span class="line">    m:update(args)</span><br><span class="line">    <span class="keyword">return</span> md5.tohex(m:finish())</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlDecode</span><span class="params">(args)</span></span></span><br><span class="line">    s = <span class="built_in">string</span>.<span class="built_in">gsub</span>(args, <span class="string">"%%(%x%x)"</span>, <span class="function"><span class="keyword">function</span><span class="params">(h)</span></span> <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">char</span>(<span class="built_in">tonumber</span>(h, <span class="number">16</span>)) <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- email=xxx@yyy.com&amp;password=zzz</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatStr</span><span class="params">(args)</span></span></span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    data = <span class="built_in">string</span>.split(args, <span class="string">'&amp;'</span>)</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(data) <span class="keyword">do</span></span><br><span class="line">        d = <span class="built_in">string</span>.split(v, <span class="string">'='</span>)</span><br><span class="line">        t[d[<span class="number">1</span>]] = d[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">string.split</span><span class="params">(s, p)</span></span></span><br><span class="line">    <span class="keyword">local</span> rt = &#123;&#125;</span><br><span class="line">    <span class="built_in">string</span>.<span class="built_in">gsub</span>(s, <span class="string">'[^'</span>..p..<span class="string">']+'</span>, <span class="function"><span class="keyword">function</span><span class="params">(w)</span></span> <span class="built_in">table</span>.<span class="built_in">insert</span>(rt, w) <span class="keyword">end</span> )</span><br><span class="line">    <span class="keyword">return</span> rt</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span><span class="params">(s)</span></span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">string</span>.<span class="built_in">gsub</span>(s, <span class="string">"^%s*(.-)%s*$"</span>, <span class="string">"%1"</span>))</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCookie</span><span class="params">(args)</span></span></span><br><span class="line">    t = &#123;&#125;</span><br><span class="line">    data = <span class="built_in">string</span>.split(args, <span class="string">";"</span>)</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(data) <span class="keyword">do</span></span><br><span class="line">        v = trim(v)</span><br><span class="line">        d = <span class="built_in">string</span>.split(v, <span class="string">"="</span>)</span><br><span class="line">        t[d[<span class="number">1</span>]] = d[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- default function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span> <span class="params">(args)</span></span></span><br><span class="line">    <span class="keyword">local</span> needs = &#123;&#125;</span><br><span class="line">    needs[<span class="string">"protocol"</span>] = <span class="string">"http"</span></span><br><span class="line">    <span class="keyword">return</span> needs</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span> <span class="params">(args)</span></span></span><br><span class="line">    filename = SCLogPath() .. <span class="string">"/"</span> .. name</span><br><span class="line">    file = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">"a"</span>))</span><br><span class="line">    SCLogInfo(<span class="string">"Web Login Log Filename "</span> .. filename)</span><br><span class="line">    http = <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(args)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- init tables</span></span><br><span class="line">    http_table = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_hostname</span></span><br><span class="line">    http_hostname = HttpGetRequestHost()</span><br><span class="line">    http_table[<span class="string">"hostname"</span>] = http_hostname</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_url</span></span><br><span class="line">    http_url = HttpGetRequestUriNormalized()</span><br><span class="line">    <span class="keyword">if</span> http_url ~= login_url <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http_table[<span class="string">"url"</span>] = login_url</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_url_path</span></span><br><span class="line">    http_table[<span class="string">"url_path"</span>] = http_url</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_method</span></span><br><span class="line">    rl = HttpGetRequestLine()</span><br><span class="line">    http_method = <span class="built_in">string</span>.<span class="built_in">match</span>(rl, <span class="string">"%w+"</span>)</span><br><span class="line">    http_table[<span class="string">"method"</span>] = http_method</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_status</span></span><br><span class="line">    rsl = HttpGetResponseLine()</span><br><span class="line">    status_code = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">"%s(%d+)%s"</span>)</span><br><span class="line">    http_status = <span class="built_in">tonumber</span>(status_code)</span><br><span class="line">    http_table[<span class="string">"status"</span>] = http_status</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- http_protocol</span></span><br><span class="line">    http_protocol = <span class="built_in">string</span>.<span class="built_in">match</span>(rsl, <span class="string">"(.-)%s"</span>)</span><br><span class="line">    http_table[<span class="string">"protocol"</span>] = http_protocol</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- request_token</span></span><br><span class="line">    cookie = HttpGetRequestHeader(<span class="string">"Cookie"</span>)</span><br><span class="line">    <span class="keyword">if</span> cookie ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        session_id = <span class="built_in">string</span>.<span class="built_in">match</span>(cookie, <span class="string">"sessionID=(.-);"</span>)</span><br><span class="line">        <span class="keyword">if</span> session_id ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[<span class="string">"request_token"</span>] = md5Encode(session_id)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            http_table[<span class="string">"request_token"</span>]  = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- response_token &amp;&amp; member_id</span></span><br><span class="line">    set_cookie = HttpGetResponseHeader(<span class="string">"Set-Cookie"</span>)</span><br><span class="line">    <span class="keyword">if</span> set_cookie ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        session_id = <span class="built_in">string</span>.<span class="built_in">match</span>(set_cookie, <span class="string">"sessionID=(.-);"</span>)</span><br><span class="line">        http_table[<span class="string">"response_token"</span>]  = md5Encode(session_id)</span><br><span class="line">        member_id = <span class="built_in">string</span>.<span class="built_in">match</span>(set_cookie, <span class="string">"memberId=(.-);"</span>)</span><br><span class="line">        http_table[<span class="string">"member_id"</span>] = <span class="built_in">tonumber</span>(member_id)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- login_results</span></span><br><span class="line">    a, o, e = HttpGetResponseBody()</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        body = json.decode(v)</span><br><span class="line">        results_code = <span class="built_in">tonumber</span>(body[<span class="string">"code"</span>])</span><br><span class="line">        <span class="keyword">if</span> results_code == success_code <span class="keyword">then</span></span><br><span class="line">            results = <span class="string">"success"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            results = <span class="string">"failed"</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http_table[<span class="string">"results"</span>] = results</span><br><span class="line">    http_table[<span class="string">"results_code"</span>] = results_code</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- email &amp; password</span></span><br><span class="line">    a, o, e = HttpGetRequestBody()</span><br><span class="line">    <span class="keyword">for</span> n, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">        res = formatStr(v)</span><br><span class="line">        mail = urlDecode(res[<span class="string">'email'</span>])</span><br><span class="line">        pass = md5Encode(res[<span class="string">'password'</span>])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    http_table[<span class="string">"email"</span>] = mail</span><br><span class="line">    http_table[<span class="string">"password"</span>] = pass</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- RequestHeaders</span></span><br><span class="line">    rh = HttpGetRequestHeaders()</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rh) <span class="keyword">do</span></span><br><span class="line">        key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line"></span><br><span class="line">        common_var = common_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> common_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[common_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        request_var = request_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> request_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[request_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- ResponseHeaders</span></span><br><span class="line">    rsh = HttpGetResponseHeaders()</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(rsh) <span class="keyword">do</span></span><br><span class="line">        key = <span class="built_in">string</span>.<span class="built_in">lower</span>(k)</span><br><span class="line"></span><br><span class="line">        common_var = common_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> common_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[common_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        response_var = response_mapping_table[key]</span><br><span class="line">        <span class="keyword">if</span> response_var ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">            http_table[response_var] = v</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- timestring = SCPacketTimeString() 2019-09-10T06:08:35.582449+0000</span></span><br><span class="line">    sec, usec = SCPacketTimestamp()</span><br><span class="line">    timestring = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">"!%Y-%m-%dT%T"</span>, sec) .. <span class="string">"."</span> .. usec .. <span class="string">"+0000"</span></span><br><span class="line">    </span><br><span class="line">    ip_version, src_ip, dst_ip, protocol, src_port, dst_port = SCFlowTuple()</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- flow_id</span></span><br><span class="line">    id = SCFlowId()</span><br><span class="line">    flow_id = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%.0f"</span>, id)</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- true_ip</span></span><br><span class="line">    true_client_ip = HttpGetRequestHeader(<span class="string">"True-Client-IP"</span>)</span><br><span class="line">    <span class="keyword">if</span> true_client_ip ~= <span class="literal">nil</span> <span class="keyword">then</span></span><br><span class="line">        src_ip = true_client_ip</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- table</span></span><br><span class="line">    raw_data = &#123;</span><br><span class="line">        timestamp = timestring,</span><br><span class="line">        flow_id = flow_id,</span><br><span class="line">        src_ip = src_ip,</span><br><span class="line">        src_port = src_port,</span><br><span class="line">        dest_ip = dst_ip,</span><br><span class="line">        dest_port = dst_port,</span><br><span class="line">        event_name = event_name,</span><br><span class="line">        event_type = event_type,</span><br><span class="line">        app_type = app_type,</span><br><span class="line">        http = http_table,</span><br><span class="line">        proto = <span class="string">"TCP"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- json encode</span></span><br><span class="line">    data = json.encode(raw_data)</span><br><span class="line"></span><br><span class="line">    file:<span class="built_in">write</span>(data .. <span class="string">"\n"</span>)</span><br><span class="line">    file:<span class="built_in">flush</span>()</span><br><span class="line"></span><br><span class="line">    http = http + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deinit</span> <span class="params">(args)</span></span></span><br><span class="line">    SCLogInfo (<span class="string">"HTTP transactions logged: "</span> .. http);</span><br><span class="line">    file:<span class="built_in">close</span>(file)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"src_port"</span>: <span class="number">34963</span>,</span><br><span class="line">    <span class="attr">"event_type"</span>: <span class="string">"lua"</span>,</span><br><span class="line">    <span class="attr">"proto"</span>: <span class="string">"TCP"</span>,</span><br><span class="line">    <span class="attr">"flow_id"</span>: <span class="string">"471693756052529"</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-10-07T13:51:01.560556+0000"</span>,</span><br><span class="line">    <span class="attr">"event_name"</span>: <span class="string">"login_audit"</span>,</span><br><span class="line">    <span class="attr">"dest_port"</span>: <span class="number">3007</span>,</span><br><span class="line">    <span class="attr">"http"</span>: &#123;</span><br><span class="line">        <span class="attr">"response_content_length"</span>: <span class="string">"446"</span>,</span><br><span class="line">        <span class="attr">"response_content_type"</span>: <span class="string">"application/json; charset=utf-8"</span>,</span><br><span class="line">        <span class="attr">"accept_encoding"</span>: <span class="string">"gzip"</span>,</span><br><span class="line">        <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="attr">"server"</span>: <span class="string">"nginx"</span>,</span><br><span class="line">        <span class="attr">"results_code"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"vary"</span>: <span class="string">"Accept-Encoding"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"420ce28ef813a2dc05e52a7e24eb0d5c"</span>,</span><br><span class="line">        <span class="attr">"date"</span>: <span class="string">"Mon, 07 Oct 2019 13:51:01 GMT"</span>,</span><br><span class="line">        <span class="attr">"request_content_type"</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>,</span><br><span class="line">        <span class="attr">"accept_language"</span>: <span class="string">"en-US,en;q=0.9"</span>,</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"/login"</span>,</span><br><span class="line">        <span class="attr">"x_requested_with"</span>: <span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">        <span class="attr">"x_forwarded_proto"</span>: <span class="string">"https"</span>,</span><br><span class="line">        <span class="attr">"user_agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36"</span>,</span><br><span class="line">        <span class="attr">"origin"</span>: <span class="string">"https://www.canon.com"</span>,</span><br><span class="line">        <span class="attr">"response_token"</span>: <span class="string">"4f5f386aec34e877ce63fce7ddd3f15f"</span>,</span><br><span class="line">        <span class="attr">"pragma"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">        <span class="attr">"connection"</span>: <span class="string">"close"</span>,</span><br><span class="line">        <span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">        <span class="attr">"hostname"</span>: <span class="string">"www.canon.com"</span>,</span><br><span class="line">        <span class="attr">"url_path"</span>: <span class="string">"/login"</span>,</span><br><span class="line">        <span class="attr">"cache_control"</span>: <span class="string">"no-cache, max-age=0, no-store, must-revalidate"</span>,</span><br><span class="line">        <span class="attr">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"admin@canon.com"</span>,</span><br><span class="line">        <span class="attr">"request_token"</span>: <span class="string">"109464370570b23fa9768078ab1ac8a9"</span>,</span><br><span class="line">        <span class="attr">"member_id"</span>: <span class="number">123456</span>,</span><br><span class="line">        <span class="attr">"results"</span>: <span class="string">"success"</span>,</span><br><span class="line">        <span class="attr">"request_content_length"</span>: <span class="string">"49"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"src_ip"</span>: <span class="string">"77.99.22.17"</span>,</span><br><span class="line">    <span class="attr">"dest_ip"</span>: <span class="string">"1.1.1.1"</span>,</span><br><span class="line">    <span class="attr">"app_type"</span>: <span class="string">"web"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>我在'云'上的日子 - Zeek(部署)</title>
    <url>/2019/10/14/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90%20-%20Zeek%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><a href="https://holdmybeersecurity.com/2019/04/03/part-1-install-setup-zeek-pf_ring-on-ubuntu-18-04-on-proxmox-5-3-openvswitch/" target="_blank" rel="noopener"><strong>PART 1: INSTALL/SETUP ZEEK + PF_RING ON UBUNTU 18.04 ON PROXMOX 5.3 + OPENVSWITCH</strong></a></p>
<h1 id="Zeek"><a href="#Zeek" class="headerlink" title="Zeek"></a>Zeek</h1><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="https://docs.zeek.org/en/stable/install/install.html" target="_blank" rel="noopener">Installing Zeek</a></strong></li>
</ul>
<p><strong>Required Dependencies</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install cmake make gcc g++ flex bison libpcap-dev libssl-dev python-dev swig zlib1g-dev</span><br></pre></td></tr></table></figure>

<p><em>If your system uses Python 2.7, then you will also need to install the <code>python-ipaddres</code> package.</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install python-ipaddress</span><br></pre></td></tr></table></figure>

<p><strong>Optional Dependencies</strong></p>
<ul>
<li>libmaxminddb (for geolocating IP addresses)</li>
<li>sendmail (enables Bro and BroControl to send mail)</li>
<li>curl (used by a Bro script that implements active HTTP)</li>
<li>gperftools (tcmalloc is used to improve memory and CPU usage)</li>
<li>jemalloc (<a href="http://www.canonware.com/jemalloc/" target="_blank" rel="noopener">http://www.canonware.com/jemalloc/</a>)</li>
<li>PF_RING (Linux only, see <a href="https://docs.zeek.org/en/stable/configuration/index.html" target="_blank" rel="noopener">Cluster Configuration</a>)</li>
<li>krb5 libraries and headers</li>
<li>ipsumdump (for trace-summary; <a href="http://www.cs.ucla.edu/~kohler/ipsumdump" target="_blank" rel="noopener">http://www.cs.ucla.edu/~kohler/ipsumdump</a>)</li>
</ul>
<p><strong>Installing Bro</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> --recursive https://github.com/zeek/zeek</span><br><span class="line">$ ./configure --with-pcap=/usr/<span class="built_in">local</span>/include --with-geoip=/usr/share/GeoIP</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><strong>Add PATH</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/zeek/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/zeek/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<p><strong>Enable Json</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/zeek/share/zeek/site/local.zeek</span><br><span class="line"></span><br><span class="line"><span class="comment"># Uncomment the following line to enable logging of link-layer addresses. Enabling</span></span><br><span class="line"><span class="comment"># this adds the link-layer address for each connection endpoint to the conn.log file.</span></span><br><span class="line"><span class="comment"># @load policy/protocols/conn/mac-logging</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">@load policy/tuning/json-logs.zeek</span><br></pre></td></tr></table></figure>

<p><strong>Using PF_RING</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/zeek/etc/node.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example ZeekControl node configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This example has a standalone node ready to go except for possibly changing</span></span><br><span class="line"><span class="comment"># the sniffing interface.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is a complete standalone configuration.  Most likely you will</span></span><br><span class="line"><span class="comment"># only need to change the interface.</span></span><br><span class="line"><span class="comment"># [zeek]</span></span><br><span class="line"><span class="comment"># type=standalone</span></span><br><span class="line"><span class="comment"># host=localhost</span></span><br><span class="line"><span class="comment"># interface=ens33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Below is an example clustered configuration. If you use this,</span></span><br><span class="line"><span class="comment">## remove the [zeek] node above.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#[logger]</span></span><br><span class="line"><span class="comment">#type=logger</span></span><br><span class="line"><span class="comment">#host=localhost</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[manager]</span><br><span class="line"><span class="built_in">type</span>=manager</span><br><span class="line">host=localhost</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[proxy-1]</span><br><span class="line"><span class="built_in">type</span>=proxy</span><br><span class="line">host=localhost</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">[worker-1]</span><br><span class="line"><span class="built_in">type</span>=worker</span><br><span class="line">host=localhost</span><br><span class="line">interface=ens33</span><br><span class="line">lb_method=pf_ring</span><br><span class="line">lb_procs=1</span><br><span class="line">pin_cpus=1</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#[worker-2]</span></span><br><span class="line"><span class="comment">#type=worker</span></span><br><span class="line"><span class="comment">#host=localhost</span></span><br><span class="line"><span class="comment">#interface=eth0</span></span><br></pre></td></tr></table></figure>

<h1 id="Optional-Dependencies"><a href="#Optional-Dependencies" class="headerlink" title="Optional Dependencies"></a>Optional Dependencies</h1><h2 id="PF-RING"><a href="#PF-RING" class="headerlink" title="PF_RING"></a>PF_RING</h2><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="https://www.zeek.org/documentation/load-balancing.html" target="_blank" rel="noopener">Installing PF_RING</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/ntop/PF_RING.git</span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/kernel</span><br><span class="line">$ make</span><br><span class="line">$ sudo insmod ./pf_ring.ko</span><br><span class="line">$ <span class="built_in">cd</span> ../userland</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure>

<p><strong>pfring</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/src</span><br><span class="line">$ tar xvzf PF_RING-6.2.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> PF_RING-6.2.0/userland/lib</span><br><span class="line">$ ./configure --prefix=/opt/pfring</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><strong>libpcap</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../libpcap</span><br><span class="line">$ ./configure --prefix=/opt/pfring</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><strong>tcpdump</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../tcpdump</span><br><span class="line">$ ./configure --prefix=/opt/pfring</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../../kernel</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<p><strong>Load pf_ring at boot</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'pf_ring'</span> &gt;&gt; /etc/modules</span><br><span class="line">$ sudo reboot</span><br><span class="line"></span><br><span class="line">root@ubuntu:~<span class="comment"># lsmod | grep pf_ring</span></span><br><span class="line">pf_ring              1245184  0</span><br></pre></td></tr></table></figure>

<p><em>确保Zeek正确链接到所需的libpcap库:</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/usr/<span class="built_in">local</span>/zeek/etc<span class="comment"># ldd /usr/local/zeek/bin/zeek | grep pcap</span></span><br><span class="line">	libpcap.so.1 =&gt; /opt/pfring/lib/libpcap.so.1 (0x00007fc3c199d000)</span><br></pre></td></tr></table></figure>

<h2 id="GeoLocation"><a href="#GeoLocation" class="headerlink" title="GeoLocation"></a>GeoLocation</h2><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="https://docs.zeek.org/en/stable/frameworks/geoip.html#geolocation" target="_blank" rel="noopener">Installing LibgeoIP</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install libmaxminddb-dev</span><br><span class="line">$ wget http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz</span><br><span class="line">$ tar zxf GeoLite2-City.tar.gz</span><br><span class="line">$ mkdir -p /usr/share/GeoIP</span><br><span class="line">$ mv GeoLite2-City_20190702/GeoLite2-City.mmdb /usr/share/GeoIP/</span><br></pre></td></tr></table></figure>

<p><strong>Testing</strong></p>
<p><em>如果未找到任何内容或未设置<code>mmdb_dir</code>，则Bro按以下顺序查找位置数据库文件：</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bro -e <span class="string">"print lookup_location(8.8.8.8);"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>/usr/share/GeoIP/GeoLite2-City.mmdb</li>
<li>/var/lib/GeoIP/GeoLite2-City.mmdb</li>
<li>/usr/local/share/GeoIP/GeoLite2-City.mmdb</li>
<li>/usr/local/var/GeoIP/GeoLite2-City.mmdb</li>
<li>/usr/share/GeoIP/GeoLite2-Country.mmdb</li>
<li>/var/lib/GeoIP/GeoLite2-Country.mmdb</li>
<li>/usr/local/share/GeoIP/GeoLite2-Country.mmdb</li>
<li>/usr/local/var/GeoIP/GeoLite2-Country.mmdb</li>
</ul>
<p><em>如果出现 “Bro was not configured for GeoIP support”, 源码安装时需要指定<code>./configure --with-geoip=/usr/share/GeoIP</code></em></p>
<h2 id="Gperftools"><a href="#Gperftools" class="headerlink" title="Gperftools"></a>Gperftools</h2><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="http://pkxpp.github.io/2017/03/30/gperftools%E5%AE%89%E8%A3%85/" target="_blank" rel="noopener">Installing Gperftools</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/gperftools/gperftools.git</span><br><span class="line">$ sudo apt-get install libunwind-dev autoconf automake libtool</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<h2 id="IPsumdump"><a href="#IPsumdump" class="headerlink" title="IPsumdump"></a>IPsumdump</h2><p><strong>参考:</strong></p>
<ul>
<li><a href="http://www.read.seas.harvard.edu/~kohler/ipsumdump/" target="_blank" rel="noopener"><strong>Installing IPsumdump</strong></a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -O http://www.read.seas.harvard.edu/~kohler/ipsumdump/ipsumdump-1.86.tar.gz</span><br><span class="line">$ tar -xzf ipsumdump-1.86.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> ipsumdump-1.86</span><br><span class="line">$ ./configure --prefix=/usr/</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo make clean</span><br></pre></td></tr></table></figure>

<h2 id="Krb5"><a href="#Krb5" class="headerlink" title="Krb5"></a>Krb5</h2><p><strong>参考:</strong></p>
<ul>
<li><strong><a href="http://computing.help.inf.ed.ac.uk/kerberos-ubuntu" target="_blank" rel="noopener">Installing Krb5</a></strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install krb5-user</span><br></pre></td></tr></table></figure>

<h2 id="Jemalloc"><a href="#Jemalloc" class="headerlink" title="Jemalloc"></a>Jemalloc</h2><p>参考:</p>
<ul>
<li><a href="https://blog.csdn.net/u013224233/article/details/87930772" target="_blank" rel="noopener"><strong>Installing Jemalloc</strong></a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/jemalloc/jemalloc.git</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ make -j2</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure>

<h1 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h1><ol>
<li><strong>查看是否丢包</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeekctl netstats; date</span><br><span class="line"> worker-1-1: 1565971837.137228 recvd=2834922 dropped=0 link=2834922</span><br><span class="line"> worker-1-2: 1565971837.147334 recvd=2550230 dropped=0 link=2550230</span><br><span class="line"> worker-1-3: 1565971837.162362 recvd=5180417 dropped=0 link=5180417</span><br><span class="line"> worker-1-4: 1565971837.170347 recvd=3235356 dropped=0 link=3235356</span><br><span class="line"> worker-1-5: 1565971837.186545 recvd=1916826 dropped=0 link=1916826</span><br><span class="line"> worker-1-6: 1565971837.201416 recvd=2944762 dropped=0 link=2944762</span><br><span class="line"> worker-1-7: 1565971837.214975 recvd=2279448 dropped=0 link=2279448</span><br><span class="line"> worker-1-8: 1565971837.229167 recvd=1896171 dropped=0 link=1896171</span><br><span class="line"> worker-1-9: 1565971837.249430 recvd=2550968 dropped=0 link=2550968</span><br><span class="line">worker-1-10: 1565971837.246513 recvd=3339864 dropped=0 link=3339864</span><br><span class="line">worker-1-11: 1565971837.260010 recvd=3080981 dropped=0 link=3080981</span><br><span class="line">worker-1-12: 1565971837.274447 recvd=2410030 dropped=0 link=2410030</span><br><span class="line">worker-1-13: 1565971837.282654 recvd=2188787 dropped=0 link=2188787</span><br><span class="line">worker-1-14: 1565971837.294684 recvd=3103014 dropped=0 link=3103014</span><br><span class="line">Fri Aug 16 16:10:37 UTC 2019</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>查看资源占用</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeekctl top; date</span><br><span class="line">Name         Type    Host             Pid     VSize  Rss  Cpu   Cmd</span><br><span class="line">logger       logger  localhost        8808      1G    99M   5%  zeek</span><br><span class="line">manager      manager localhost        8855    568M    97M  23%  zeek</span><br><span class="line">proxy-1      proxy   localhost        8901    566M    92M   5%  zeek</span><br><span class="line">worker-1-1   worker  localhost        9086      1G   697M  11%  zeek</span><br><span class="line">worker-1-2   worker  localhost        9093      1G   699M  23%  zeek</span><br><span class="line">worker-1-3   worker  localhost        9105      1G   700M  17%  zeek</span><br><span class="line">worker-1-4   worker  localhost        9111      1G   696M  17%  zeek</span><br><span class="line">worker-1-5   worker  localhost        9114      1G   699M  17%  zeek</span><br><span class="line">worker-1-6   worker  localhost        9120      1G   699M  11%  zeek</span><br><span class="line">worker-1-7   worker  localhost        9121      1G   699M  11%  zeek</span><br><span class="line">worker-1-8   worker  localhost        9132      1G   701M  11%  zeek</span><br><span class="line">worker-1-9   worker  localhost        9140      1G   699M  11%  zeek</span><br><span class="line">worker-1-10  worker  localhost        9142      1G   700M  11%  zeek</span><br><span class="line">worker-1-11  worker  localhost        9151      1G   696M  23%  zeek</span><br><span class="line">worker-1-12  worker  localhost        9155      1G   698M  17%  zeek</span><br><span class="line">worker-1-13  worker  localhost        9154      1G   701M  11%  zeek</span><br><span class="line">worker-1-14  worker  localhost        9157      1G   698M  17%  zeek</span><br><span class="line">Fri Aug 16 16:11:25 UTC 2019</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>查看流量大小(10秒)</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ zeekctl capstats; date</span><br><span class="line">Interface             kpps       mbps       (10s average)</span><br><span class="line">----------------------------------------</span><br><span class="line">localhost/ens5        37.8       375.2</span><br><span class="line">Fri Aug 16 16:12:47 UTC 2019</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Zeek</tag>
      </tags>
  </entry>
  <entry>
    <title>我在'云'上的日子 - Suricata(部署)</title>
    <url>/2019/10/14/%E6%88%91%E5%9C%A8%E4%BA%91%E4%B8%8A%E7%9A%84%E6%97%A5%E5%AD%90%20-%20Suricata%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="PF-RING"><a href="#PF-RING" class="headerlink" title="PF_RING"></a>PF_RING</h2><p><strong>1. pf_ring</strong></p>
<ul>
<li><strong>二进制安装</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 18.04 LTS</span></span><br><span class="line">$ apt-get install software-properties-common wget</span><br><span class="line">$ add-apt-repository universe [ unless you have <span class="keyword">done</span> it previously ]</span><br><span class="line">$ wget http://apt-stable.ntop.org/18.04/all/apt-ntop-stable.deb</span><br><span class="line">$ apt install ./apt-ntop-stable.deb</span><br><span class="line"></span><br><span class="line">$ apt-get clean all</span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install pfring</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>编译安装</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">$ apt install git make gcc libelf-dev build-essential subversion flex libnuma-dev bison pkg-config libtool rustc cargo libjansson-dev ethtool autoconf autogen liblzma-dev libpcre3-dev libyaml-dev libpcap-dev zlib1g-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ntop/PF_RING.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/kernel</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 pf_ring.ko</span></span><br><span class="line">$ sudo insmod pf_ring.ko min_num_slots=65536 transparent_mode=2 enable_tx_capture=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 pf_ring 信息</span></span><br><span class="line">$ cat /proc/net/pf_ring/info</span><br><span class="line">PF_RING Version          : 7.5.0 (dev:14f62e0edb2b54cd614ab9d1f6467ccb8c6c9c32)</span><br><span class="line">Total rings              : 0</span><br><span class="line"></span><br><span class="line">Standard (non ZC) Options</span><br><span class="line">Ring slots               : 65536</span><br><span class="line">Slot version             : 17</span><br><span class="line">Capture TX               : No [RX only]</span><br><span class="line">IP Defragment            : No</span><br><span class="line">Socket Mode              : Standard</span><br><span class="line">Cluster Fragment Queue   : 0</span><br><span class="line">Cluster Fragment Discard : 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载 pf_ring.ko</span></span><br><span class="line">$ sudo rmmod pf_ring</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>2. libpfring、libpcap</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> PF_RING/userland/lib</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure &amp;&amp; make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ../libpcap</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure &amp;&amp; make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> PF_RING/userland/examples</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 接收数据包</span></span><br><span class="line">root@ubuntu:/opt/PF_RING/userland/examples# ./pfcount -i ens33</span><br><span class="line">Using PF_RING v.7.5.0</span><br><span class="line">Capturing from ens33 [mac: 00:0C:29:D5:B9:8F][if_index: 2][speed: 0Mb/s]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Device RX channels: 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Polling threads:    1</span></span><br><span class="line">Dumping statistics on /proc/net/pf_ring/stats/51441-ens33.3</span><br><span class="line">=========================</span><br><span class="line">Absolute Stats: [2 pkts total][0 pkts dropped][0.0% dropped]</span><br><span class="line">[2 pkts rcvd][424 bytes rcvd]</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 发送数据包</span></span><br><span class="line">root@ubuntu:/opt/PF_RING/userland/examples# sudo ./pfsend -f 64byte_packets.pcap -n 0 -i ens33 -r 5</span><br><span class="line">Sending packets on ens33</span><br><span class="line">Using PF_RING v.7.5.0</span><br><span class="line">Estimated CPU freq: 2429795000 Hz</span><br><span class="line">Unable to open file 64byte_packets.pcap</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>3. tcpdump</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ <span class="built_in">cd</span> PF_RING/userland/tcpdump/</span><br><span class="line">$ ./configure &amp;&amp; make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>参考:</strong></p>
<ul>
<li><p><strong><a href="https://www.ntop.org/guides/pf_ring/get_started/git_installation.html" target="_blank" rel="noopener">PF_RING</a></strong></p>
</li>
<li><p><a href="http://packages.ntop.org/apt-stable/" target="_blank" rel="noopener">http://packages.ntop.org/apt-stable/</a></p>
</li>
<li><p><a href="https://www.ntop.org/guides/pf_ring/get_started/packages_installation.html" target="_blank" rel="noopener">https://www.ntop.org/guides/pf_ring/get_started/packages_installation.html</a></p>
</li>
<li><p><a href="https://www.ntop.org/guides/pf_ring/thirdparty/suricata.html" target="_blank" rel="noopener">https://www.ntop.org/guides/pf_ring/thirdparty/suricata.html</a></p>
</li>
</ul>
<h2 id="LuaJIT"><a href="#LuaJIT" class="headerlink" title="LuaJIT"></a>LuaJIT</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf LuaJIT-2.0.5.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> LuaJIT-2.0.5/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig -p | grep lua</span></span><br><span class="line">	liblua5.1.so.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1.so.0</span><br><span class="line">	liblua5.1.so (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1.so</span><br><span class="line">	liblua5.1-c++.so.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1-c++.so.0</span><br><span class="line">	liblua5.1-c++.so (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/liblua5.1-c++.so</span><br></pre></td></tr></table></figure>

<h2 id="Hyperscan"><a href="#Hyperscan" class="headerlink" title="Hyperscan"></a>Hyperscan</h2><p><strong>1. boost</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install cmake</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.bintray.com/boostorg/release/1.69.0/<span class="built_in">source</span>/boost_1_69_0.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -xvf boost_1_69_0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> boost_1_69_0/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bootstrap.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./b2 --with-iostreams --with-random install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig</span></span><br></pre></td></tr></table></figure>

<p><strong>2. ragle</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">$ sudo apt-get install autoconf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ wget http://www.colm.net/files/ragel/ragel-6.10.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ tar zxvf ragel-6.10.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> ragel-6.10</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure>

<p><strong>3. hyperscan</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖</span></span><br><span class="line">$ sudo apt install libpcap-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ wget https://github.com/intel/hyperscan/archive/v5.1.0.tar.gz -O hyperscan-5.1.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ tar -zxvf hyperscan-5.1.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> hyperscan-5.1.0</span><br><span class="line">$ mkdir cmake-build</span><br><span class="line">$ <span class="built_in">cd</span> cmake-build</span><br><span class="line">$ cmake -DBUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">$ make -j8</span><br><span class="line">$ sudo make install</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure>

<p><strong>4. 验证</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ldconfig -p | grep hs</span></span><br><span class="line">	libhs_runtime.so.5 (libc6,x86-64) =&gt; /usr/local/lib/libhs_runtime.so.5</span><br><span class="line">	libhs_runtime.so (libc6,x86-64) =&gt; /usr/local/lib/libhs_runtime.so</span><br><span class="line">	libhs.so.5 (libc6,x86-64) =&gt; /usr/local/lib/libhs.so.5</span><br><span class="line">	libhs.so (libc6,x86-64) =&gt; /usr/local/lib/libhs.so</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>参考:</strong></p>
<ul>
<li><a href="http://www.manongjc.com/article/110977.html" target="_blank" rel="noopener"><strong>Hyperscan - 5.1.0 安装</strong></a></li>
</ul>
<h2 id="Suricata"><a href="#Suricata" class="headerlink" title="Suricata"></a><strong>Suricata</strong></h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libpcre3 libpcre3-dbg libpcre3-dev build-essential libpcap-dev   \</span></span><br><span class="line">                libnet1-dev libyaml-0-2 libyaml-dev pkg-config zlib1g zlib1g-dev \</span><br><span class="line">                libcap-ng-dev libcap-ng0 make libmagic-dev libjansson-dev        \</span><br><span class="line">                libnss3-dev libgeoip-dev libhiredis-dev libevent-dev \</span><br><span class="line">                python-yaml rustc cargo libmaxminddb-dev liblzma-dev \</span><br><span class="line">                python3-distutils liblz4-dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Suricata 5.0.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.openinfosecfoundation.org/download/suricata-5.0.2.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir suricata</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> suricata</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://phalanx.openinfosecfoundation.org/oisf.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> oisf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/OISF/libhtp.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./autogen.sh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --<span class="built_in">enable</span>-pfring --with-libpfring-includes=/usr/<span class="built_in">local</span>/include --with-libpfring-libraries=/usr/<span class="built_in">local</span>/lib --<span class="built_in">enable</span>-geoip  --<span class="built_in">enable</span>-luajit --with-libluajit-includes=/usr/<span class="built_in">local</span>/include/luajit-2.0/ --with-libluajit-libraries=/usr/<span class="built_in">local</span>/lib/ --with-libhs-includes=/usr/<span class="built_in">local</span>/include/hs/ --with-libhs-libraries=/usr/<span class="built_in">local</span>/lib/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make &amp;&amp; make install-full</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ldconfig</span></span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p><strong>1. PF_RING</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --build-info | grep PF_RING</span></span><br><span class="line">Features: PCAP_SET_BUFF PF_RING AF_PACKET HAVE_PACKET_FANOUT LIBCAP_NG LIBNET1.1 HAVE_HTP_URI_NORMALIZE_HOOK PCRE_JIT HAVE_NSS HAVE_LUA HAVE_LUAJIT HAVE_LIBJANSSON PROFILING TLS MAGIC RUST</span><br><span class="line">  PF_RING support:                         yes</span><br></pre></td></tr></table></figure>

<p><strong>2. LuaJit</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --build-info | grep lua</span></span><br><span class="line">  LUA support:                             yes, through luajit</span><br><span class="line">  libluajit:                               yes</span><br></pre></td></tr></table></figure>

<p><strong>3. Hyperscan</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --build-info | grep Hyperscan</span></span><br><span class="line">  Hyperscan support:                       yes</span><br></pre></td></tr></table></figure>

<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a><strong>启动</strong></h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> suricata --pfring-int=ens6 --pfring-cluster-id=99 --pfring-cluster-type=cluster_flow -c /etc/suricata/suricata.yaml</span></span><br></pre></td></tr></table></figure>

<h1 id="规则管理"><a href="#规则管理" class="headerlink" title="规则管理"></a>规则管理</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade suricata-update</span><br></pre></td></tr></table></figure>

<p><strong>定时更新</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> crontab -l</span></span><br><span class="line">10 0 * * * /usr/bin/suricata-update --no-test &amp;&amp; /usr/bin/suricatasc -c reload-rules</span><br></pre></td></tr></table></figure>

<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p><a href="https://www.jianshu.com/p/9348e211a6a2" target="_blank" rel="noopener">https://www.jianshu.com/p/9348e211a6a2</a></p>
]]></content>
      <categories>
        <category>NIDS</category>
      </categories>
      <tags>
        <tag>Suricata</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy + Splash 实现动态网页爬取</title>
    <url>/2019/10/08/Scrapy%20+%20Splash%20%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E7%BD%91%E9%A1%B5%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>​        这是一个撞库事件的后续, 通过之前编写的脚本<strong>Suricata - login_audit</strong>脚本成功审计到了所有登录网站的账号。这里需要对经过分析后存在可疑行为的账号进行反向查询, 主要判断该账号是否已被标记为泄露账号。</p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>​        由于<strong>Scrapy</strong>没有<strong>JS Eengine</strong>只能爬取静态页面的, 对于JS生成的动态页面是不支持的。但是可以借助<a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="noopener"><strong>Scrapy-Splash</strong></a>来实现动态页面的爬取。</p>
<h1 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h1><h2 id="1-Scrapy-Splash"><a href="#1-Scrapy-Splash" class="headerlink" title="1. Scrapy-Splash"></a>1. Scrapy-Splash</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install scrapy-splash --user</span><br></pre></td></tr></table></figure>

<h2 id="2-Splash-Instance"><a href="#2-Splash-Instance" class="headerlink" title="2. Splash Instance"></a>2. Splash Instance</h2><p>由于<strong>Scrapy-Splash</strong>使用的是<strong>Splash HTTP API</strong>， 所以需要一个<strong><a href="https://splash.readthedocs.io/en/stable/install.html" target="_blank" rel="noopener">Splash Instance</a></strong>，一般采用<strong><a href="https://hub.docker.com/r/scrapinghub/splash" target="_blank" rel="noopener">Docker</a></strong>运行<strong>Splash</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ more docker-compose.yml</span><br><span class="line">version: <span class="string">"2.0"</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  splash:</span><br><span class="line">    restart: always</span><br><span class="line">    image: scrapinghub/splash</span><br><span class="line">    tty: <span class="literal">true</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"8050:8050"</span></span><br><span class="line">    network_mode: <span class="string">"bridge"</span></span><br><span class="line">    container_name: <span class="string">"Splash"</span></span><br><span class="line">    hostname: <span class="string">"Splash"</span></span><br></pre></td></tr></table></figure>

<h2 id="3-配置Splash服务（以下操作全部在settings-py）"><a href="#3-配置Splash服务（以下操作全部在settings-py）" class="headerlink" title="3. 配置Splash服务（以下操作全部在settings.py）"></a>3. 配置<a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="noopener"><strong>Splash</strong></a>服务（以下操作全部在<strong>settings.py</strong>）</h2><p><strong>3.1    添加Splash服务器地址</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPLASH_URL = <span class="string">'http://localhost:8050'</span></span><br></pre></td></tr></table></figure>

<p><strong>3.2    启用Splash middleware</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashCookiesMiddleware'</span>: 723,</span><br><span class="line">    <span class="string">'scrapy_splash.SplashMiddleware'</span>: 725,</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: 810,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>Order 723 is just before HttpProxyMiddleware (750) in default scrapy settings.</em></p>
<p><strong>3.3    启用SplashDeduplicateArgsMiddleware</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: 100,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.4  自定义 DUPEFILTER_CLASS</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DUPEFILTER_CLASS = <span class="string">'scrapy_splash.SplashAwareDupeFilter'</span></span><br></pre></td></tr></table></figure>

<p><strong>3.5 使用Scrapy HTTP缓存</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HTTPCACHE_STORAGE = <span class="string">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure>

<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><p>注:  当使用<strong>Scrapy-Splash</strong>之后, 将无法直接使用<strong>crawlera middleware</strong>。需要手动引用外部lua脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> haveibeenpwned.items <span class="keyword">import</span> feed</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scrapy_splash <span class="keyword">import</span> SplashRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">from redis crawl haveibeenpwned</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">LUA_SOURCE = <span class="string">"""</span></span><br><span class="line"><span class="string">    function main(splash)</span></span><br><span class="line"><span class="string">        local host = "proxy.crawlera.com"</span></span><br><span class="line"><span class="string">        local port = 8010</span></span><br><span class="line"><span class="string">        local user = "api_key"</span></span><br><span class="line"><span class="string">        local password = ""</span></span><br><span class="line"><span class="string">        local session_header = "X-Crawlera-Session"</span></span><br><span class="line"><span class="string">        local session_id = "create"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        splash:on_request(function (request)</span></span><br><span class="line"><span class="string">            request:set_header("X-Crawlera-UA", "desktop")</span></span><br><span class="line"><span class="string">            request:set_header(session_header, session_id)</span></span><br><span class="line"><span class="string">            request:set_proxy&#123;host, port, username=user, password=password&#125;</span></span><br><span class="line"><span class="string">        end)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        splash:on_response_headers(function (response)</span></span><br><span class="line"><span class="string">            if response.headers[session_header] ~= nil then</span></span><br><span class="line"><span class="string">                session_id = response.headers[session_header]</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        end)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        splash:go(splash.args.url)</span></span><br><span class="line"><span class="string">        return splash:html()</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'scrapy_demo'</span></span><br><span class="line">    start_urls = <span class="string">'https://httpbin.org/get'</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> SplashRequest(self.start_urls, self.parse, endpoint=<span class="string">'execute'</span>,  args=&#123;<span class="string">'wait'</span>: <span class="number">3</span>, <span class="string">'lua_source'</span>: LUA_SOURCE&#125;)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(response.text)</span><br></pre></td></tr></table></figure>

<p>参考:</p>
<ul>
<li><a href="https://github.com/scrapy-plugins/scrapy-splash/issues/117" target="_blank" rel="noopener">https://github.com/scrapy-plugins/scrapy-splash/issues/117</a></li>
</ul>
<p>参考:</p>
<ul>
<li><a href="https://splash.readthedocs.io/en/stable/search.html?q=splash%3Ahtml&check_keywords=yes&area=default" target="_blank" rel="noopener">Splash</a></li>
<li><a href="https://github.com/scrapy-plugins/scrapy-splash" target="_blank" rel="noopener">Scrapy-Splash</a></li>
<li><a href="https://doc.scrapinghub.com/crawlera.html#using-crawlera-with-splash" target="_blank" rel="noopener">Scrapinghub API Reference</a></li>
<li><a href="https://stackoverflow.com/questions/43646438/using-proxy-with-scrapy-splash" target="_blank" rel="noopener">using proxy with scrapy-splash</a></li>
<li><a href="http://stackoverflow.com/questions/43090352/proxy-servers-with-scrapy-splash" target="_blank" rel="noopener"><strong>Proxy servers with Scrapy-Splash</strong></a></li>
<li><a href="https://github.com/scrapy-plugins/scrapy-splash/issues/97" target="_blank" rel="noopener">Crawlera integration</a></li>
<li><a href="https://blog.csdn.net/zhengxiangwen/article/details/55227368" target="_blank" rel="noopener"><strong>利用scrapy-splash爬取JS生成的动态页面</strong></a></li>
</ul>
]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
